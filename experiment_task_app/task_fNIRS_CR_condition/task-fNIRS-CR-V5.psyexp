<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2022.1.3">
  <Settings>
    <Param val="use prefs" valType="str" updates="None" name="Audio latency priority"/>
    <Param val="use prefs" valType="str" updates="None" name="Audio lib"/>
    <Param val="" valType="str" updates="None" name="Completed URL"/>
    <Param val="auto" valType="str" updates="None" name="Data file delimiter"/>
    <Param val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code" updates="None" name="Data filename"/>
    <Param val="True" valType="bool" updates="None" name="Enable Escape"/>
    <Param val="{'participant': '', 'session': '001'}" valType="code" updates="None" name="Experiment info"/>
    <Param val="True" valType="bool" updates="None" name="Force stereo"/>
    <Param val="True" valType="bool" updates="None" name="Full-screen window"/>
    <Param val="" valType="str" updates="None" name="HTML path"/>
    <Param val="" valType="str" updates="None" name="Incomplete URL"/>
    <Param val="testMonitor" valType="str" updates="None" name="Monitor"/>
    <Param val="[]" valType="list" updates="None" name="Resources"/>
    <Param val="False" valType="bool" updates="None" name="Save csv file"/>
    <Param val="False" valType="bool" updates="None" name="Save excel file"/>
    <Param val="False" valType="bool" updates="None" name="Save hdf5 file"/>
    <Param val="True" valType="bool" updates="None" name="Save log file"/>
    <Param val="True" valType="bool" updates="None" name="Save psydat file"/>
    <Param val="True" valType="bool" updates="None" name="Save wide csv file"/>
    <Param val="1" valType="num" updates="None" name="Screen"/>
    <Param val="True" valType="bool" updates="None" name="Show info dlg"/>
    <Param val="False" valType="bool" updates="None" name="Show mouse"/>
    <Param val="height" valType="str" updates="None" name="Units"/>
    <Param val="" valType="str" updates="None" name="Use version"/>
    <Param val="[1920, 1080]" valType="list" updates="None" name="Window size (pixels)"/>
    <Param val="avg" valType="str" updates="None" name="blendMode"/>
    <Param val="$[-1.0000, -1.0000, -1.0000]" valType="color" updates="None" name="color"/>
    <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
    <Param val="100.1.1.1" valType="str" updates="None" name="elAddress"/>
    <Param val="FILTER_LEVEL_2" valType="str" updates="None" name="elDataFiltering"/>
    <Param val="FILTER_LEVEL_OFF" valType="str" updates="None" name="elLiveFiltering"/>
    <Param val="EYELINK 1000 DESKTOP" valType="str" updates="None" name="elModel"/>
    <Param val="ELLIPSE_FIT" valType="str" updates="None" name="elPupilAlgorithm"/>
    <Param val="PUPIL_AREA" valType="str" updates="None" name="elPupilMeasure"/>
    <Param val="1000" valType="num" updates="None" name="elSampleRate"/>
    <Param val="False" valType="bool" updates="None" name="elSimMode"/>
    <Param val="RIGHT_EYE" valType="str" updates="None" name="elTrackEyes"/>
    <Param val="PUPIL_CR_TRACKING" valType="str" updates="None" name="elTrackingMode"/>
    <Param val="taskPrototype" valType="str" updates="None" name="expName"/>
    <Param val="on Sync" valType="str" updates="None" name="exportHTML"/>
    <Param val="None" valType="str" updates="None" name="eyetracker"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="gpAddress"/>
    <Param val="4242" valType="num" updates="None" name="gpPort"/>
    <Param val="ioHub" valType="str" updates="None" name="keyboardBackend"/>
    <Param val="exp" valType="code" updates="None" name="logging level"/>
    <Param val="('MIDDLE_BUTTON',)" valType="list" updates="None" name="mgBlink"/>
    <Param val="CONTINUOUS" valType="str" updates="None" name="mgMove"/>
    <Param val="0.5" valType="num" updates="None" name="mgSaccade"/>
    <Param val="0.6" valType="num" updates="None" name="plConfidenceThreshold"/>
    <Param val="True" valType="bool" updates="None" name="plPupilCaptureRecordingEnabled"/>
    <Param val="" valType="str" updates="None" name="plPupilCaptureRecordingLocation"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="plPupilRemoteAddress"/>
    <Param val="50020" valType="num" updates="None" name="plPupilRemotePort"/>
    <Param val="1000" valType="num" updates="None" name="plPupilRemoteTimeoutMs"/>
    <Param val="False" valType="bool" updates="None" name="plPupillometryOnly"/>
    <Param val="psychopy_iohub_surface" valType="str" updates="None" name="plSurfaceName"/>
    <Param val="" valType="str" updates="None" name="tbLicenseFile"/>
    <Param val="" valType="str" updates="None" name="tbModel"/>
    <Param val="60" valType="num" updates="None" name="tbSampleRate"/>
    <Param val="" valType="str" updates="None" name="tbSerialNo"/>
  </Settings>
  <Routines>
    <Routine name="start">
      <CodeComponent name="init_code">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="import pyxid2&amp;#10;import time&amp;#10;devices = pyxid2.get_xid_devices()&amp;#10;assert len(devices) &gt; 0&amp;#10;d = devices[0]&amp;#10;d.init_device()&amp;#10;d.set_pulse_duration(500)&amp;#10;&amp;#10;# one sweep through all lines &amp;#10;#for i in range(1,9): &amp;#10;#d.activate_line(lines=[i]) &amp;#10;#time.sleep(1.2) &amp;#10;&amp;#10;#initalize the loop limits for each device&amp;#10;gaborLim = 24&amp;#10;ctrlLim = 24&amp;#10;blockLim = 5&amp;#10;learnlim = 180" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="import * as pyxid2 from 'pyxid2';&amp;#10;import * as time from 'time';&amp;#10;var _pj;&amp;#10;var blockLim, ctrlLim, d, devices, gaborLim, learnlim;&amp;#10;function _pj_snippets(container) {&amp;#10;    function _assert(comp, msg) {&amp;#10;        function PJAssertionError(message) {&amp;#10;            this.name = &quot;PJAssertionError&quot;;&amp;#10;            this.message = (message || &quot;Custom error PJAssertionError&quot;);&amp;#10;            if (((typeof Error.captureStackTrace) === &quot;function&quot;)) {&amp;#10;                Error.captureStackTrace(this, this.constructor);&amp;#10;            } else {&amp;#10;                this.stack = new Error(message).stack;&amp;#10;            }&amp;#10;        }&amp;#10;        PJAssertionError.prototype = Object.create(Error.prototype);&amp;#10;        PJAssertionError.prototype.constructor = PJAssertionError;&amp;#10;        msg = (msg || &quot;Assertion failed.&quot;);&amp;#10;        if ((! comp)) {&amp;#10;            throw new PJAssertionError(msg);&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;_assert&quot;] = _assert;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;devices = pyxid2.get_xid_devices();&amp;#10;_pj._assert((devices.length &gt; 0), null);&amp;#10;d = devices[0];&amp;#10;d.init_device();&amp;#10;d.set_pulse_duration(500);&amp;#10;gaborLim = 24;&amp;#10;ctrlLim = 24;&amp;#10;blockLim = 5;&amp;#10;learnlim = 180;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="init_code" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="txt_start">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="txt_start" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Begin Experiment&amp;#10;&amp;#10;Press [X]" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="key_resp">
        <Param val="'x'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="gaborTrial">
      <ImageComponent name="img_gaborTrial">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$stimID" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="img_gaborTrial" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.8, 0.8)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <KeyboardComponent name="key_gaborTrial">
        <Param val="'1', '0'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="$keymap" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_gaborTrial" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="True" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="code_gaborTrial">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="if ((gaborloopc === 0)) {&amp;#10;    d.activate_line({&quot;lines&quot;: [1]});&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# sends trigger to fNIRS on initial trial (0)&amp;#10;&amp;#10;if gaborloopc == 0:&amp;#10;    d.activate_line(lines=[1])&amp;#10;    &amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_gaborTrial" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="gaborFb">
      <CodeComponent name="code_gaborFb">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="msg='doh!' #debug msg printing&amp;#10;gaborloopc = 0" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="msg = &quot;doh!&quot;;&amp;#10;gaborloopc = 0;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="if ((! key_gaborTrial.keys)) {&amp;#10;    msg = &quot;Failed to respond&quot;;&amp;#10;    txt_gaborfb.color = &quot;Red&quot;;&amp;#10;    gaborfbdur = 0.5;&amp;#10;} else {&amp;#10;    if (key_gaborTrial.corr) {&amp;#10;        msg = &quot;Correct!&quot;;&amp;#10;        txt_gaborfb.color = &quot;Green&quot;;&amp;#10;        gaborfbdur = (0.5 + (1.5 - key_gaborTrial.rt));&amp;#10;    } else {&amp;#10;        msg = &quot;Incorrect&quot;;&amp;#10;        txt_gaborfb.color = &quot;Red&quot;;&amp;#10;        gaborfbdur = (0.5 + (1.5 - key_gaborTrial.rt));&amp;#10;    }&amp;#10;}&amp;#10;gaborloopc = (gaborloopc + 1);&amp;#10;if ((gaborloopc &gt;= gaborLim)) {&amp;#10;    gaborLoop.finished = true;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="#provides feedback for trial&amp;#10;#no response/wrong shows red&amp;#10;#correct repsonse shows green&amp;#10;if not key_gaborTrial.keys:&amp;#10;    msg = &quot;Failed to respond&quot;&amp;#10;    txt_gaborfb.color = &quot;Red&quot;&amp;#10;    gaborfbdur = 0.5 #fb default 0.5s&amp;#10;elif key_gaborTrial.corr: #stored on last run routine&amp;#10;    msg = &quot;Correct!&quot;&amp;#10;    txt_gaborfb.color = &quot;Green&quot;&amp;#10;    gaborfbdur = 0.5 + (1.5 - key_gaborTrial.rt) #leftover t&amp;#10;else:&amp;#10;    msg = &quot;Incorrect&quot;&amp;#10;    txt_gaborfb.color = &quot;Red&quot;&amp;#10;    gaborfbdur = 0.5 + (1.5 - key_gaborTrial.rt)&amp;#10;&amp;#10;#adds loop counter&amp;#10;gaborloopc = gaborloopc + 1 &amp;#10;&amp;#10;#ends gabor loop at defined limit&amp;#10;if gaborloopc &gt;= gaborLim:  &amp;#10;    gaborLoop.finished = True&amp;#10;    &amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_gaborFb" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="txt_gaborfb">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="txt_gaborfb" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="$gaborfbdur" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$msg" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="ctrlTrial">
      <CodeComponent name="code_ctrlTrial">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="if ((ctrlloopc === 0)) {&amp;#10;    d.activate_line({&quot;lines&quot;: [2]});&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# sends trigger to fNIRS on initial trial (0)&amp;#10;&amp;#10;if ctrlloopc == 0:&amp;#10;    d.activate_line(lines=[2])" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_ctrlTrial" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <ImageComponent name="imgCtrlTrial">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$ctrlID" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="imgCtrlTrial" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, -0.05)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.8, 0.8)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <KeyboardComponent name="keyCtrlTrial">
        <Param val="'1', '0'" valType="list" updates="set every repeat" name="allowedKeys"/>
        <Param val="$ans" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="keyCtrlTrial" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="True" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <TextComponent name="txtCtrlTrial">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="txtCtrlTrial" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0.45)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="MATCH [1]                                          NO [0]" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="ctrlFb">
      <CodeComponent name="ctrlCode">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="msg = &quot;oop&quot;&amp;#10;&amp;#10;ctrlloopc = 0" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="msg = &quot;oop&quot;;&amp;#10;ctrlloopc = 0;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="if ((! keyCtrlTrial.keys)) {&amp;#10;    msg = &quot;Failed to respond&quot;;&amp;#10;    txtCtrlFb.color = &quot;Red&quot;;&amp;#10;    ctrlfbdur = 0.5;&amp;#10;} else {&amp;#10;    if (keyCtrlTrial.corr) {&amp;#10;        msg = &quot;Correct!&quot;;&amp;#10;        txtCtrlFb.color = &quot;Green&quot;;&amp;#10;        ctrlfbdur = (0.5 + (1.5 - keyCtrlTrial.rt));&amp;#10;    } else {&amp;#10;        msg = &quot;Incorrect&quot;;&amp;#10;        txtCtrlFb.color = &quot;Red&quot;;&amp;#10;        ctrlfbdur = (0.5 + (1.5 - keyCtrlTrial.rt));&amp;#10;    }&amp;#10;}&amp;#10;ctrlloopc = (ctrlloopc + 1);&amp;#10;if ((ctrlloopc &gt;= ctrlLim)) {&amp;#10;    ctrlLoop.finished = true;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="#provides feedback for ctrl trials&amp;#10;if not keyCtrlTrial.keys:&amp;#10;    msg = &quot;Failed to respond&quot;&amp;#10;    txtCtrlFb.color = &quot;Red&quot;&amp;#10;    ctrlfbdur = 0.5 #fb default 0.5s&amp;#10;elif keyCtrlTrial.corr: #stored on last run routine&amp;#10;    msg = &quot;Correct!&quot;&amp;#10;    txtCtrlFb.color = &quot;Green&quot;&amp;#10;    ctrlfbdur = 0.5 + (1.5 - keyCtrlTrial.rt) #leftover t&amp;#10;else:&amp;#10;    msg = &quot;Incorrect&quot;&amp;#10;    txtCtrlFb.color = &quot;Red&quot;&amp;#10;    ctrlfbdur = 0.5 + (1.5 - keyCtrlTrial.rt)&amp;#10;&amp;#10;#adds to control loop counter&amp;#10;ctrlloopc = ctrlloopc + 1 &amp;#10;&amp;#10;#ends trial at defined limit&amp;#10;if ctrlloopc &gt;= ctrlLim: &amp;#10;    ctrlLoop.finished = True&amp;#10;    &amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="ctrlCode" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="txtCtrlFb">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="txtCtrlFb" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="$ctrlfbdur" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$msg" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="txtCtrlFbSustain">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="txtCtrlFbSustain" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0.45)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="$ctrlfbdur" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="MATCH [1]                                          NO [0]" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="end">
      <TextComponent name="text">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Experiment Finished!&amp;#10;&amp;#10;[Q]" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="key_end">
        <Param val="'q'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_end" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="rest1">
      <CodeComponent name="code_rest1">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="d.activate_line({&quot;lines&quot;: [3]});&amp;#10;gaborloopc = 0;&amp;#10;r1_jitter = [12, 14, 16, 18, 20];&amp;#10;r1_jitdur = r1_jitter[blockloopc];&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="#sends trigger 3 to nirX&amp;#10;d.activate_line(lines=[3])&amp;#10;&amp;#10;#resets gabor loopcounter for next iteration&amp;#10;gaborloopc = 0 &amp;#10;&amp;#10;#declare vector of jittered rest times&amp;#10;#assign duration based on blockloop index&amp;#10;#5B x 24T x 2s&amp;#10;r1_jitter = [12,14,16,18,20]&amp;#10;r1_jitdur = r1_jitter[blockloopc]&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_rest1" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="txtFixation1">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="txtFixation1" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="$r1_jitdur" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="+" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="rest2">
      <CodeComponent name="code_rest2">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="#initalize blockloop counter starting at 0&amp;#10;#blockloop gets ++ at end of each loop&amp;#10;blockloopc = 0" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="blockloopc = 0;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="d.activate_line({&quot;lines&quot;: [3]});&amp;#10;ctrlloopc = 0;&amp;#10;r2_jitter = [20, 18, 16, 14, 12];&amp;#10;r2_jitdur = r2_jitter[blockloopc];&amp;#10;blockloopc = (blockloopc + 1);&amp;#10;if ((blockloopc &gt;= blockLim)) {&amp;#10;    blockLoop.finished = true;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="#sends trigger 3 to nirX&amp;#10;d.activate_line(lines=[3])&amp;#10;&amp;#10;#resets ctrl loop counter for next iteration&amp;#10;ctrlloopc = 0 &amp;#10;&amp;#10;#declare vector of jittered rest times&amp;#10;#assign duration based on blockloop index&amp;#10;#5B x 24T x 2s&amp;#10;r2_jitter = [20,18,16,14,12]&amp;#10;r2_jitdur = r2_jitter[blockloopc]&amp;#10;&amp;#10;#add to blockloop counter&amp;#10;blockloopc = blockloopc + 1&amp;#10;&amp;#10;#ends loop after once blocklimit is reached&amp;#10;if blockloopc &gt;= blockLim:&amp;#10;    blockLoop.finished = True&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_rest2" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="txtFixation2">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="txtFixation2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="$r2_jitdur" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="+" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="learnTrial">
      <ImageComponent name="imgLearn">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$stimID" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="imgLearn" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.8, 0.8)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="2.0" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <KeyboardComponent name="keyLearn">
        <Param val="'1', '0'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="$keymap" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="keyLearn" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="2.0" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="True" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="codeLearnTrial">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="/* Syntax Error: Fix Python code */" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="#start of experiment trigger " valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="codeLearnTrial" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="learnFb">
      <CodeComponent name="codeLearnFb">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="learnloopc = 0" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="learnloopc = 0;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="if ((! keyLearn.keys)) {&amp;#10;    msg = &quot;Failed to respond&quot;;&amp;#10;    txtLearnFb.color = &quot;Red&quot;;&amp;#10;    learnFbDur = 1.0;&amp;#10;} else {&amp;#10;    if (keyLearn.corr) {&amp;#10;        msg = &quot;Correct!&quot;;&amp;#10;        txtLearnFb.color = &quot;Green&quot;;&amp;#10;        learnFbDur = (1.0 + (2.0 - keyLearn.rt));&amp;#10;    } else {&amp;#10;        msg = &quot;Incorrect&quot;;&amp;#10;        txtLearnFb.color = &quot;Red&quot;;&amp;#10;        learnFbDur = (1.0 + (2.0 - keyLearn.rt));&amp;#10;    }&amp;#10;}&amp;#10;learnloopc = (learnloopc + 1);&amp;#10;if ((learnloopc &gt;= learnlim)) {&amp;#10;    learnLoop.finished = true;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="#provides feedback for trial&amp;#10;#no response/wrong shows red&amp;#10;#correct repsonse shows green&amp;#10;if not keyLearn.keys:&amp;#10;    msg = &quot;Failed to respond&quot;&amp;#10;    txtLearnFb.color = &quot;Red&quot;&amp;#10;    learnFbDur = 1.0 #fb default 0.5s&amp;#10;elif keyLearn.corr: #stored on last run routine&amp;#10;    msg = &quot;Correct!&quot;&amp;#10;    txtLearnFb.color = &quot;Green&quot;&amp;#10;    learnFbDur = 1.0 + (2.0 - keyLearn.rt) #leftover t&amp;#10;else:&amp;#10;    msg = &quot;Incorrect&quot;&amp;#10;    txtLearnFb.color = &quot;Red&quot;&amp;#10;    learnFbDur = 1.0 + (2.0 - keyLearn.rt)&amp;#10;&amp;#10;#adds loop counter&amp;#10;learnloopc = learnloopc + 1&amp;#10;&amp;#10;#ends gabor loop at defined limit&amp;#10;if learnloopc &gt;= learnlim:  &amp;#10;    learnLoop.finished = True&amp;#10;    &amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="codeLearnFb" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="txtLearnFb">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="txtLearnFb" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="$learnFbDur" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$msg" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="rest0">
      <CodeComponent name="codeRest0">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="d.activate_line({&quot;lines&quot;: [3]});&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="#sends trigger 3 to nirX&amp;#10;d.activate_line(lines=[3])" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="codeRest0" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="txtRest0">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="txtRest0" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="20" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="+" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="start"/>
    <LoopInitiator loopType="TrialHandler" name="learnLoop">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('cpi', 32.7989956994058), ('deg', 39.7928511961921), ('keymap', 1), ('stimNum', 1), ('stimID', 'stim_CR/CR_A_1.png')]), OrderedDict([('cpi', 46.6016562019535), ('deg', 74.7022902898009), ('keymap', 1), ('stimNum', 2), ('stimID', 'stim_CR/CR_A_2.png')]), OrderedDict([('cpi', 44.3537936228233), ('deg', 80.6072195661703), ('keymap', 1), ('stimNum', 3), ('stimID', 'stim_CR/CR_A_3.png')]), OrderedDict([('cpi', 55.4742466120659), ('deg', 71.4500569481669), ('keymap', 1), ('stimNum', 4), ('stimID', 'stim_CR/CR_A_4.png')]), OrderedDict([('cpi', 59.8206802679876), ('deg', 48.9675497918339), ('keymap', 1), ('stimNum', 5), ('stimID', 'stim_CR/CR_A_5.png')]), OrderedDict([('cpi', 69.1430628740741), ('deg', 67.5613368762024), ('keymap', 1), ('stimNum', 6), ('stimID', 'stim_CR/CR_A_6.png')]), OrderedDict([('cpi', 50.1430839358375), ('deg', 48.546135871112), ('keymap', 1), ('stimNum', 7), ('stimID', 'stim_CR/CR_A_7.png')]), OrderedDict([('cpi', 73.8143508558617), ('deg', 65.1719996557286), ('keymap', 1), ('stimNum', 8), ('stimID', 'stim_CR/CR_A_8.png')]), OrderedDict([('cpi', 64.344191618972), ('deg', 43.9700782752635), ('keymap', 1), ('stimNum', 9), ('stimID', 'stim_CR/CR_A_9.png')]), OrderedDict([('cpi', 72.8338551348971), ('deg', 64.7935414182491), ('keymap', 1), ('stimNum', 10), ('stimID', 'stim_CR/CR_A_10.png')]), OrderedDict([('cpi', 70.9795848467393), ('deg', 43.88420402559), ('keymap', 1), ('stimNum', 11), ('stimID', 'stim_CR/CR_A_11.png')]), OrderedDict([('cpi', 53.2624659696482), ('deg', 53.8878571028894), ('keymap', 1), ('stimNum', 12), ('stimID', 'stim_CR/CR_A_12.png')]), OrderedDict([('cpi', 40.709670210437), ('deg', 59.3837701978012), ('keymap', 1), ('stimNum', 13), ('stimID', 'stim_CR/CR_A_13.png')]), OrderedDict([('cpi', 40.5693478466145), ('deg', 45.20394459486), ('keymap', 1), ('stimNum', 14), ('stimID', 'stim_CR/CR_A_14.png')]), OrderedDict([('cpi', 30.6324525503709), ('deg', 56.6537416693706), ('keymap', 1), ('stimNum', 15), ('stimID', 'stim_CR/CR_A_15.png')]), OrderedDict([('cpi', 42.5788829011567), ('deg', 62.4418903972774), ('keymap', 1), ('stimNum', 16), ('stimID', 'stim_CR/CR_A_16.png')]), OrderedDict([('cpi', 33.7016805460695), ('deg', 76.8107362831947), ('keymap', 1), ('stimNum', 17), ('stimID', 'stim_CR/CR_A_17.png')]), OrderedDict([('cpi', 49.8380360062855), ('deg', 73.1300064342994), ('keymap', 1), ('stimNum', 18), ('stimID', 'stim_CR/CR_A_18.png')]), OrderedDict([('cpi', 55.6987319317251), ('deg', 51.4839947072907), ('keymap', 1), ('stimNum', 19), ('stimID', 'stim_CR/CR_A_19.png')]), OrderedDict([('cpi', 50.5287072846779), ('deg', 65.4519474541447), ('keymap', 1), ('stimNum', 20), ('stimID', 'stim_CR/CR_A_20.png')]), OrderedDict([('cpi', 57.2689707306023), ('deg', 30.9223240331117), ('keymap', 1), ('stimNum', 21), ('stimID', 'stim_CR/CR_A_21.png')]), OrderedDict([('cpi', 44.1030975470715), ('deg', 46.5856721358858), ('keymap', 1), ('stimNum', 22), ('stimID', 'stim_CR/CR_A_22.png')]), OrderedDict([('cpi', 47.3954052298861), ('deg', 51.533646742366), ('keymap', 1), ('stimNum', 23), ('stimID', 'stim_CR/CR_A_23.png')]), OrderedDict([('cpi', 33.7808463745506), ('deg', 45.4016048998041), ('keymap', 1), ('stimNum', 24), ('stimID', 'stim_CR/CR_A_24.png')]), OrderedDict([('cpi', 45.3149939524157), ('deg', 59.8922737958413), ('keymap', 1), ('stimNum', 25), ('stimID', 'stim_CR/CR_A_25.png')]), OrderedDict([('cpi', 52.8735294948481), ('deg', 38.2567587887309), ('keymap', 1), ('stimNum', 26), ('stimID', 'stim_CR/CR_A_26.png')]), OrderedDict([('cpi', 61.8897905089942), ('deg', 70.6613299223959), ('keymap', 1), ('stimNum', 27), ('stimID', 'stim_CR/CR_A_27.png')]), OrderedDict([('cpi', 44.0323010991113), ('deg', 61.885837031464), ('keymap', 1), ('stimNum', 28), ('stimID', 'stim_CR/CR_A_28.png')]), OrderedDict([('cpi', 50.297341473014), ('deg', 43.6415550537495), ('keymap', 1), ('stimNum', 29), ('stimID', 'stim_CR/CR_A_29.png')]), OrderedDict([('cpi', 52.5812999878706), ('deg', 28.5622923239139), ('keymap', 1), ('stimNum', 30), ('stimID', 'stim_CR/CR_A_30.png')]), OrderedDict([('cpi', 37.0093462413072), ('deg', 28.646972413869), ('keymap', 1), ('stimNum', 31), ('stimID', 'stim_CR/CR_A_31.png')]), OrderedDict([('cpi', 91.4257615366426), ('deg', 44.6847031930346), ('keymap', 1), ('stimNum', 32), ('stimID', 'stim_CR/CR_A_32.png')]), OrderedDict([('cpi', 67.0753251796034), ('deg', 53.6700910367889), ('keymap', 1), ('stimNum', 33), ('stimID', 'stim_CR/CR_A_33.png')]), OrderedDict([('cpi', 48.0894195745622), ('deg', 60.0450091669001), ('keymap', 1), ('stimNum', 34), ('stimID', 'stim_CR/CR_A_34.png')]), OrderedDict([('cpi', 42.7207841610123), ('deg', 55.8379375344341), ('keymap', 1), ('stimNum', 35), ('stimID', 'stim_CR/CR_A_35.png')]), OrderedDict([('cpi', 51.7828687295719), ('deg', 44.337244641531), ('keymap', 1), ('stimNum', 36), ('stimID', 'stim_CR/CR_A_36.png')]), OrderedDict([('cpi', 36.667968408262), ('deg', 53.8629277551519), ('keymap', 1), ('stimNum', 37), ('stimID', 'stim_CR/CR_A_37.png')]), OrderedDict([('cpi', 49.2079670688276), ('deg', 45.6641237773519), ('keymap', 1), ('stimNum', 38), ('stimID', 'stim_CR/CR_A_38.png')]), OrderedDict([('cpi', 27.0744216706263), ('deg', 68.6866329428609), ('keymap', 1), ('stimNum', 39), ('stimID', 'stim_CR/CR_A_39.png')]), OrderedDict([('cpi', 43.1969672094227), ('deg', 49.7301784387126), ('keymap', 1), ('stimNum', 40), ('stimID', 'stim_CR/CR_A_40.png')]), OrderedDict([('cpi', 43.8136060135285), ('deg', 43.1752174023293), ('keymap', 1), ('stimNum', 41), ('stimID', 'stim_CR/CR_A_41.png')]), OrderedDict([('cpi', 43.7938550674785), ('deg', 55.105241720835), ('keymap', 1), ('stimNum', 42), ('stimID', 'stim_CR/CR_A_42.png')]), OrderedDict([('cpi', 47.2677371113093), ('deg', 50.1004869527194), ('keymap', 1), ('stimNum', 43), ('stimID', 'stim_CR/CR_A_43.png')]), OrderedDict([('cpi', 30.9896093357586), ('deg', 48.6290803584966), ('keymap', 1), ('stimNum', 44), ('stimID', 'stim_CR/CR_A_44.png')]), OrderedDict([('cpi', 33.7453551578001), ('deg', 30.4881675776706), ('keymap', 1), ('stimNum', 45), ('stimID', 'stim_CR/CR_A_45.png')]), OrderedDict([('cpi', 70.3372215654848), ('deg', 18.1632501419915), ('keymap', 1), ('stimNum', 46), ('stimID', 'stim_CR/CR_A_46.png')]), OrderedDict([('cpi', 48.4614383405167), ('deg', 36.3945112989206), ('keymap', 1), ('stimNum', 47), ('stimID', 'stim_CR/CR_A_47.png')]), OrderedDict([('cpi', 25.3288722194637), ('deg', 58.4819022577577), ('keymap', 1), ('stimNum', 48), ('stimID', 'stim_CR/CR_A_48.png')]), OrderedDict([('cpi', 70.4809900670313), ('deg', 58.0455109096441), ('keymap', 1), ('stimNum', 49), ('stimID', 'stim_CR/CR_A_49.png')]), OrderedDict([('cpi', 36.6824224376862), ('deg', 49.4112274463665), ('keymap', 1), ('stimNum', 50), ('stimID', 'stim_CR/CR_A_50.png')]), OrderedDict([('cpi', 64.6130094975805), ('deg', 22.144627053452), ('keymap', 1), ('stimNum', 51), ('stimID', 'stim_CR/CR_A_51.png')]), OrderedDict([('cpi', 59.664773828093), ('deg', 76.3303121510464), ('keymap', 1), ('stimNum', 52), ('stimID', 'stim_CR/CR_A_52.png')]), OrderedDict([('cpi', 42.0701859712854), ('deg', 34.9648628656892), ('keymap', 1), ('stimNum', 53), ('stimID', 'stim_CR/CR_A_53.png')]), OrderedDict([('cpi', 36.8906236360869), ('deg', 28.2299283100366), ('keymap', 1), ('stimNum', 54), ('stimID', 'stim_CR/CR_A_54.png')]), OrderedDict([('cpi', 31.2088714696452), ('deg', 49.2801010122541), ('keymap', 1), ('stimNum', 55), ('stimID', 'stim_CR/CR_A_55.png')]), OrderedDict([('cpi', 58.3413668129662), ('deg', 57.3661478205865), ('keymap', 1), ('stimNum', 56), ('stimID', 'stim_CR/CR_A_56.png')]), OrderedDict([('cpi', 78.3049471504746), ('deg', 37.6043588780278), ('keymap', 1), ('stimNum', 57), ('stimID', 'stim_CR/CR_A_57.png')]), OrderedDict([('cpi', 65.6283188854112), ('deg', 44.8299169079058), ('keymap', 1), ('stimNum', 58), ('stimID', 'stim_CR/CR_A_58.png')]), OrderedDict([('cpi', 42.2172524854811), ('deg', 65.7949120730595), ('keymap', 1), ('stimNum', 59), ('stimID', 'stim_CR/CR_A_59.png')]), OrderedDict([('cpi', 49.9372218655609), ('deg', 47.4190891870895), ('keymap', 1), ('stimNum', 60), ('stimID', 'stim_CR/CR_A_60.png')]), OrderedDict([('cpi', 51.6041418342984), ('deg', 46.4860280877074), ('keymap', 1), ('stimNum', 61), ('stimID', 'stim_CR/CR_A_61.png')]), OrderedDict([('cpi', 59.775000028412), ('deg', 39.5150487779416), ('keymap', 1), ('stimNum', 62), ('stimID', 'stim_CR/CR_A_62.png')]), OrderedDict([('cpi', 62.1605016423724), ('deg', 48.8670920009006), ('keymap', 1), ('stimNum', 63), ('stimID', 'stim_CR/CR_A_63.png')]), OrderedDict([('cpi', 33.0094973938307), ('deg', 32.465770159379), ('keymap', 1), ('stimNum', 64), ('stimID', 'stim_CR/CR_A_64.png')]), OrderedDict([('cpi', 86.6552821790885), ('deg', 38.1675834151919), ('keymap', 1), ('stimNum', 65), ('stimID', 'stim_CR/CR_A_65.png')]), OrderedDict([('cpi', 51.1202591723487), ('deg', 36.0261146048551), ('keymap', 1), ('stimNum', 66), ('stimID', 'stim_CR/CR_A_66.png')]), OrderedDict([('cpi', 34.2401912180322), ('deg', 50.8047168386076), ('keymap', 1), ('stimNum', 67), ('stimID', 'stim_CR/CR_A_67.png')]), OrderedDict([('cpi', 37.1557840298365), ('deg', 38.3897706040043), ('keymap', 1), ('stimNum', 68), ('stimID', 'stim_CR/CR_A_68.png')]), OrderedDict([('cpi', 45.5685707470678), ('deg', 75.1293762549424), ('keymap', 1), ('stimNum', 69), ('stimID', 'stim_CR/CR_A_69.png')]), OrderedDict([('cpi', 29.8037849036203), ('deg', 51.9969192150458), ('keymap', 1), ('stimNum', 70), ('stimID', 'stim_CR/CR_A_70.png')]), OrderedDict([('cpi', 52.517529367084), ('deg', 61.6021371417258), ('keymap', 1), ('stimNum', 71), ('stimID', 'stim_CR/CR_A_71.png')]), OrderedDict([('cpi', 60.1738913823841), ('deg', 49.2459195928322), ('keymap', 1), ('stimNum', 72), ('stimID', 'stim_CR/CR_A_72.png')]), OrderedDict([('cpi', 77.4666641737514), ('deg', 56.714861044714), ('keymap', 1), ('stimNum', 73), ('stimID', 'stim_CR/CR_A_73.png')]), OrderedDict([('cpi', 37.1958689418928), ('deg', 54.7099661922963), ('keymap', 1), ('stimNum', 74), ('stimID', 'stim_CR/CR_A_74.png')]), OrderedDict([('cpi', 64.9864222849275), ('deg', 51.1481731574566), ('keymap', 1), ('stimNum', 75), ('stimID', 'stim_CR/CR_A_75.png')]), OrderedDict([('cpi', 53.8373157063797), ('deg', 66.1695972048739), ('keymap', 1), ('stimNum', 76), ('stimID', 'stim_CR/CR_A_76.png')]), OrderedDict([('cpi', 61.0555816061788), ('deg', 41.1844314428034), ('keymap', 1), ('stimNum', 77), ('stimID', 'stim_CR/CR_A_77.png')]), OrderedDict([('cpi', 71.424956267416), ('deg', 57.600419408491), ('keymap', 1), ('stimNum', 78), ('stimID', 'stim_CR/CR_A_78.png')]), OrderedDict([('cpi', 59.1552207588489), ('deg', 49.3141633417892), ('keymap', 1), ('stimNum', 79), ('stimID', 'stim_CR/CR_A_79.png')]), OrderedDict([('cpi', 30.2073581473777), ('deg', 41.1218830435595), ('keymap', 1), ('stimNum', 80), ('stimID', 'stim_CR/CR_A_80.png')]), OrderedDict([('cpi', 48.3238192450286), ('deg', 39.4640022333872), ('keymap', 1), ('stimNum', 81), ('stimID', 'stim_CR/CR_A_81.png')]), OrderedDict([('cpi', 32.7103535734978), ('deg', 66.6429134179288), ('keymap', 1), ('stimNum', 82), ('stimID', 'stim_CR/CR_A_82.png')]), OrderedDict([('cpi', 40.3297112462578), ('deg', 54.9149488811312), ('keymap', 1), ('stimNum', 83), ('stimID', 'stim_CR/CR_A_83.png')]), OrderedDict([('cpi', 57.5370528038034), ('deg', 42.0086306938252), ('keymap', 1), ('stimNum', 84), ('stimID', 'stim_CR/CR_A_84.png')]), OrderedDict([('cpi', 67.2393385281148), ('deg', 40.2372096153867), ('keymap', 1), ('stimNum', 85), ('stimID', 'stim_CR/CR_A_85.png')]), OrderedDict([('cpi', 44.1313688160103), ('deg', 74.6190609304769), ('keymap', 1), ('stimNum', 86), ('stimID', 'stim_CR/CR_A_86.png')]), OrderedDict([('cpi', 52.9479854557378), ('deg', 46.2276055777492), ('keymap', 1), ('stimNum', 87), ('stimID', 'stim_CR/CR_A_87.png')]), OrderedDict([('cpi', 66.359103185843), ('deg', 35.4372806686602), ('keymap', 1), ('stimNum', 88), ('stimID', 'stim_CR/CR_A_88.png')]), OrderedDict([('cpi', 35.8776566942945), ('deg', 50.0509285772837), ('keymap', 1), ('stimNum', 89), ('stimID', 'stim_CR/CR_A_89.png')]), OrderedDict([('cpi', 64.0889925064627), ('deg', 25.4282684283167), ('keymap', 1), ('stimNum', 90), ('stimID', 'stim_CR/CR_A_90.png')]), OrderedDict([('cpi', 41.1345018273784), ('deg', 61.0810495126105), ('keymap', 1), ('stimNum', 91), ('stimID', 'stim_CR/CR_A_91.png')]), OrderedDict([('cpi', 56.1762981461724), ('deg', 33.9969007013064), ('keymap', 1), ('stimNum', 92), ('stimID', 'stim_CR/CR_A_92.png')]), OrderedDict([('cpi', 56.5564179058558), ('deg', 34.4104673611878), ('keymap', 1), ('stimNum', 93), ('stimID', 'stim_CR/CR_A_93.png')]), OrderedDict([('cpi', 22.378654217663), ('deg', 65.6402738654988), ('keymap', 1), ('stimNum', 94), ('stimID', 'stim_CR/CR_A_94.png')]), OrderedDict([('cpi', 33.3883916608447), ('deg', 40.4957873615459), ('keymap', 1), ('stimNum', 95), ('stimID', 'stim_CR/CR_A_95.png')]), OrderedDict([('cpi', 71.0065439243149), ('deg', 44.4258429427703), ('keymap', 1), ('stimNum', 96), ('stimID', 'stim_CR/CR_A_96.png')]), OrderedDict([('cpi', 18.818872381705), ('deg', 50.7583373207625), ('keymap', 1), ('stimNum', 97), ('stimID', 'stim_CR/CR_A_97.png')]), OrderedDict([('cpi', 37.1832661242828), ('deg', 39.9766288952651), ('keymap', 1), ('stimNum', 98), ('stimID', 'stim_CR/CR_A_98.png')]), OrderedDict([('cpi', 64.8995562106304), ('deg', 53.9837698478991), ('keymap', 1), ('stimNum', 99), ('stimID', 'stim_CR/CR_A_99.png')]), OrderedDict([('cpi', 72.0790504108127), ('deg', 38.1857490772685), ('keymap', 1), ('stimNum', 100), ('stimID', 'stim_CR/CR_A_100.png')]), OrderedDict([('cpi', 25.2213556486608), ('deg', 74.2966866603272), ('keymap', 1), ('stimNum', 101), ('stimID', 'stim_CR/CR_A_101.png')]), OrderedDict([('cpi', 83.038993835661), ('deg', 59.1557251565506), ('keymap', 1), ('stimNum', 102), ('stimID', 'stim_CR/CR_A_102.png')]), OrderedDict([('cpi', 34.4439483579115), ('deg', 48.6910245028869), ('keymap', 1), ('stimNum', 103), ('stimID', 'stim_CR/CR_A_103.png')]), OrderedDict([('cpi', 30.998498133216), ('deg', 15.3640382085875), ('keymap', 1), ('stimNum', 104), ('stimID', 'stim_CR/CR_A_104.png')]), OrderedDict([('cpi', 47.5129706011552), ('deg', 51.4369061670776), ('keymap', 1), ('stimNum', 105), ('stimID', 'stim_CR/CR_A_105.png')]), OrderedDict([('cpi', 77.8019960456008), ('deg', 45.3427349124394), ('keymap', 1), ('stimNum', 106), ('stimID', 'stim_CR/CR_A_106.png')]), OrderedDict([('cpi', 59.5125732602238), ('deg', 84.7910732567461), ('keymap', 1), ('stimNum', 107), ('stimID', 'stim_CR/CR_A_107.png')]), OrderedDict([('cpi', 64.4880414633732), ('deg', 42.1597775717851), ('keymap', 1), ('stimNum', 108), ('stimID', 'stim_CR/CR_A_108.png')]), OrderedDict([('cpi', 79.0946514245538), ('deg', 56.415963226133), ('keymap', 1), ('stimNum', 109), ('stimID', 'stim_CR/CR_A_109.png')]), OrderedDict([('cpi', 69.0885162425016), ('deg', 37.5616692364029), ('keymap', 1), ('stimNum', 110), ('stimID', 'stim_CR/CR_A_110.png')]), OrderedDict([('cpi', 54.4130383222471), ('deg', 69.9428294380047), ('keymap', 1), ('stimNum', 111), ('stimID', 'stim_CR/CR_A_111.png')]), OrderedDict([('cpi', 67.1735888732321), ('deg', 18.8690734176758), ('keymap', 1), ('stimNum', 112), ('stimID', 'stim_CR/CR_A_112.png')]), OrderedDict([('cpi', 52.0913362927592), ('deg', 67.2973350418878), ('keymap', 1), ('stimNum', 113), ('stimID', 'stim_CR/CR_A_113.png')]), OrderedDict([('cpi', 46.915612446904), ('deg', 49.449273818665), ('keymap', 1), ('stimNum', 114), ('stimID', 'stim_CR/CR_A_114.png')]), OrderedDict([('cpi', 59.8485936770201), ('deg', 68.2360871043607), ('keymap', 1), ('stimNum', 115), ('stimID', 'stim_CR/CR_A_115.png')]), OrderedDict([('cpi', 31.2888904916498), ('deg', 77.4385982945252), ('keymap', 1), ('stimNum', 116), ('stimID', 'stim_CR/CR_A_116.png')]), OrderedDict([('cpi', 60.9151842023028), ('deg', 34.8227789240045), ('keymap', 1), ('stimNum', 117), ('stimID', 'stim_CR/CR_A_117.png')]), OrderedDict([('cpi', 45.5413564203258), ('deg', 51.7970428760078), ('keymap', 1), ('stimNum', 118), ('stimID', 'stim_CR/CR_A_118.png')]), OrderedDict([('cpi', 28.3852352743976), ('deg', 36.6151492296561), ('keymap', 1), ('stimNum', 119), ('stimID', 'stim_CR/CR_A_119.png')]), OrderedDict([('cpi', 46.3117555258944), ('deg', 49.7403658451603), ('keymap', 1), ('stimNum', 120), ('stimID', 'stim_CR/CR_A_120.png')]), OrderedDict([('cpi', 45.139755967768), ('deg', 41.5114992875424), ('keymap', 1), ('stimNum', 121), ('stimID', 'stim_CR/CR_A_121.png')]), OrderedDict([('cpi', 57.8786773060465), ('deg', 42.2167685118776), ('keymap', 1), ('stimNum', 122), ('stimID', 'stim_CR/CR_A_122.png')]), OrderedDict([('cpi', 52.7973103705368), ('deg', 25.7676932620943), ('keymap', 1), ('stimNum', 123), ('stimID', 'stim_CR/CR_A_123.png')]), OrderedDict([('cpi', 67.5090059294113), ('deg', 48.5716630602413), ('keymap', 1), ('stimNum', 124), ('stimID', 'stim_CR/CR_A_124.png')]), OrderedDict([('cpi', 48.6766571072497), ('deg', 74.0320557021554), ('keymap', 1), ('stimNum', 125), ('stimID', 'stim_CR/CR_A_125.png')]), OrderedDict([('cpi', 55.9942543750017), ('deg', 35.3708793354508), ('keymap', 1), ('stimNum', 126), ('stimID', 'stim_CR/CR_A_126.png')]), OrderedDict([('cpi', 49.6964700749097), ('deg', 43.2802347005007), ('keymap', 1), ('stimNum', 127), ('stimID', 'stim_CR/CR_A_127.png')]), OrderedDict([('cpi', 52.4628219420212), ('deg', 59.3853354459407), ('keymap', 1), ('stimNum', 128), ('stimID', 'stim_CR/CR_A_128.png')]), OrderedDict([('cpi', 46.287234626578), ('deg', 43.9140742478961), ('keymap', 1), ('stimNum', 129), ('stimID', 'stim_CR/CR_A_129.png')]), OrderedDict([('cpi', 41.8538032474694), ('deg', 62.8027744504856), ('keymap', 1), ('stimNum', 130), ('stimID', 'stim_CR/CR_A_130.png')]), OrderedDict([('cpi', 72.8284224586853), ('deg', 54.8152164284075), ('keymap', 1), ('stimNum', 131), ('stimID', 'stim_CR/CR_A_131.png')]), OrderedDict([('cpi', 54.2599318135929), ('deg', 20.3225882553627), ('keymap', 1), ('stimNum', 132), ('stimID', 'stim_CR/CR_A_132.png')]), OrderedDict([('cpi', 69.8610151228798), ('deg', 34.1593269157169), ('keymap', 1), ('stimNum', 133), ('stimID', 'stim_CR/CR_A_133.png')]), OrderedDict([('cpi', 71.4171686014238), ('deg', 47.1865608756081), ('keymap', 1), ('stimNum', 134), ('stimID', 'stim_CR/CR_A_134.png')]), OrderedDict([('cpi', 44.0221073224874), ('deg', 60.0297672950425), ('keymap', 1), ('stimNum', 135), ('stimID', 'stim_CR/CR_A_135.png')]), OrderedDict([('cpi', 64.4071386593036), ('deg', 61.2678618245804), ('keymap', 1), ('stimNum', 136), ('stimID', 'stim_CR/CR_A_136.png')]), OrderedDict([('cpi', 13.7245284262465), ('deg', 37.5578625428288), ('keymap', 1), ('stimNum', 137), ('stimID', 'stim_CR/CR_A_137.png')]), OrderedDict([('cpi', 45.4590643160671), ('deg', 31.5082373492582), ('keymap', 1), ('stimNum', 138), ('stimID', 'stim_CR/CR_A_138.png')]), OrderedDict([('cpi', 47.5748553178928), ('deg', 51.8089989203533), ('keymap', 1), ('stimNum', 139), ('stimID', 'stim_CR/CR_A_139.png')]), OrderedDict([('cpi', 35.3154217652156), ('deg', 28.4237933078575), ('keymap', 1), ('stimNum', 140), ('stimID', 'stim_CR/CR_A_140.png')]), OrderedDict([('cpi', 65.5328267749833), ('deg', 44.8137580425497), ('keymap', 1), ('stimNum', 141), ('stimID', 'stim_CR/CR_A_141.png')]), OrderedDict([('cpi', 49.9966935885951), ('deg', 67.5947252040878), ('keymap', 1), ('stimNum', 142), ('stimID', 'stim_CR/CR_A_142.png')]), OrderedDict([('cpi', 55.8409397992576), ('deg', 38.377249731378), ('keymap', 1), ('stimNum', 143), ('stimID', 'stim_CR/CR_A_143.png')]), OrderedDict([('cpi', 69.6703787481589), ('deg', 69.0691835868563), ('keymap', 1), ('stimNum', 144), ('stimID', 'stim_CR/CR_A_144.png')]), OrderedDict([('cpi', 35.275564119102), ('deg', 62.642918062299), ('keymap', 1), ('stimNum', 145), ('stimID', 'stim_CR/CR_A_145.png')]), OrderedDict([('cpi', 68.3352473598642), ('deg', 54.1667760431471), ('keymap', 1), ('stimNum', 146), ('stimID', 'stim_CR/CR_A_146.png')]), OrderedDict([('cpi', 53.6473403965722), ('deg', 39.6694221659412), ('keymap', 1), ('stimNum', 147), ('stimID', 'stim_CR/CR_A_147.png')]), OrderedDict([('cpi', 46.2445987990475), ('deg', 42.0447527725081), ('keymap', 1), ('stimNum', 148), ('stimID', 'stim_CR/CR_A_148.png')]), OrderedDict([('cpi', 30.120521037221), ('deg', 70.2726481703511), ('keymap', 1), ('stimNum', 149), ('stimID', 'stim_CR/CR_A_149.png')]), OrderedDict([('cpi', 70.2710744335616), ('deg', 37.1206243473448), ('keymap', 1), ('stimNum', 150), ('stimID', 'stim_CR/CR_A_150.png')]), OrderedDict([('cpi', -65.0363883218308), ('deg', 82.3118809822496), ('keymap', 0), ('stimNum', 1), ('stimID', 'stim_CR/CR_B_1.png')]), OrderedDict([('cpi', -37.6574648774271), ('deg', 41.0650814683264), ('keymap', 0), ('stimNum', 2), ('stimID', 'stim_CR/CR_B_2.png')]), OrderedDict([('cpi', -48.5221254519001), ('deg', 39.025672352), ('keymap', 0), ('stimNum', 3), ('stimID', 'stim_CR/CR_B_3.png')]), OrderedDict([('cpi', -78.3968505862309), ('deg', 49.7994534736642), ('keymap', 0), ('stimNum', 4), ('stimID', 'stim_CR/CR_B_4.png')]), OrderedDict([('cpi', -50.7854928725199), ('deg', 36.9756474054897), ('keymap', 0), ('stimNum', 5), ('stimID', 'stim_CR/CR_B_5.png')]), OrderedDict([('cpi', -34.6089932446744), ('deg', 88.7253579337377), ('keymap', 0), ('stimNum', 6), ('stimID', 'stim_CR/CR_B_6.png')]), OrderedDict([('cpi', -85.1436308220673), ('deg', 51.6078340401737), ('keymap', 0), ('stimNum', 7), ('stimID', 'stim_CR/CR_B_7.png')]), OrderedDict([('cpi', -88.0974851917808), ('deg', 48.0417057023316), ('keymap', 0), ('stimNum', 8), ('stimID', 'stim_CR/CR_B_8.png')]), OrderedDict([('cpi', -56.2925924696631), ('deg', 65.5443378147041), ('keymap', 0), ('stimNum', 9), ('stimID', 'stim_CR/CR_B_9.png')]), OrderedDict([('cpi', -34.0674381177664), ('deg', 38.9182717693604), ('keymap', 0), ('stimNum', 10), ('stimID', 'stim_CR/CR_B_10.png')]), OrderedDict([('cpi', -64.7552288338123), ('deg', 40.2019647135799), ('keymap', 0), ('stimNum', 11), ('stimID', 'stim_CR/CR_B_11.png')]), OrderedDict([('cpi', -43.2744687580603), ('deg', 37.524483671261), ('keymap', 0), ('stimNum', 12), ('stimID', 'stim_CR/CR_B_12.png')]), OrderedDict([('cpi', -27.1681351699521), ('deg', 49.4777158025502), ('keymap', 0), ('stimNum', 13), ('stimID', 'stim_CR/CR_B_13.png')]), OrderedDict([('cpi', -57.8497908837741), ('deg', 53.7151018892029), ('keymap', 0), ('stimNum', 14), ('stimID', 'stim_CR/CR_B_14.png')]), OrderedDict([('cpi', -58.4120960089164), ('deg', 31.8755036141222), ('keymap', 0), ('stimNum', 15), ('stimID', 'stim_CR/CR_B_15.png')]), OrderedDict([('cpi', -39.3841280704485), ('deg', 77.174422564334), ('keymap', 0), ('stimNum', 16), ('stimID', 'stim_CR/CR_B_16.png')]), OrderedDict([('cpi', -47.4423585497331), ('deg', 33.5920750463575), ('keymap', 0), ('stimNum', 17), ('stimID', 'stim_CR/CR_B_17.png')]), OrderedDict([('cpi', -30.6546904828078), ('deg', 42.5112504507788), ('keymap', 0), ('stimNum', 18), ('stimID', 'stim_CR/CR_B_18.png')]), OrderedDict([('cpi', -30.7670270120345), ('deg', 62.9040672928461), ('keymap', 0), ('stimNum', 19), ('stimID', 'stim_CR/CR_B_19.png')]), OrderedDict([('cpi', -75.6373467717099), ('deg', 21.4519277806112), ('keymap', 0), ('stimNum', 20), ('stimID', 'stim_CR/CR_B_20.png')]), OrderedDict([('cpi', -59.2105822906867), ('deg', 32.4530089099107), ('keymap', 0), ('stimNum', 21), ('stimID', 'stim_CR/CR_B_21.png')]), OrderedDict([('cpi', -52.4011324756103), ('deg', 53.3711656681721), ('keymap', 0), ('stimNum', 22), ('stimID', 'stim_CR/CR_B_22.png')]), OrderedDict([('cpi', -63.8274436098473), ('deg', 28.953381792923), ('keymap', 0), ('stimNum', 23), ('stimID', 'stim_CR/CR_B_23.png')]), OrderedDict([('cpi', -44.1916119914087), ('deg', 37.6823229284563), ('keymap', 0), ('stimNum', 24), ('stimID', 'stim_CR/CR_B_24.png')]), OrderedDict([('cpi', -19.2526241800789), ('deg', 42.3099905374236), ('keymap', 0), ('stimNum', 25), ('stimID', 'stim_CR/CR_B_25.png')]), OrderedDict([('cpi', -30.1338248875584), ('deg', 49.5742388680463), ('keymap', 0), ('stimNum', 26), ('stimID', 'stim_CR/CR_B_26.png')]), OrderedDict([('cpi', -73.9509132733207), ('deg', 33.1724892623806), ('keymap', 0), ('stimNum', 27), ('stimID', 'stim_CR/CR_B_27.png')]), OrderedDict([('cpi', -54.6063602175659), ('deg', 34.0496552493358), ('keymap', 0), ('stimNum', 28), ('stimID', 'stim_CR/CR_B_28.png')]), OrderedDict([('cpi', -40.2905789479005), ('deg', 51.5216589217371), ('keymap', 0), ('stimNum', 29), ('stimID', 'stim_CR/CR_B_29.png')]), OrderedDict([('cpi', -57.5370100160277), ('deg', 21.9014322159259), ('keymap', 0), ('stimNum', 30), ('stimID', 'stim_CR/CR_B_30.png')]), OrderedDict([('cpi', -68.9747196199752), ('deg', 47.2815970926449), ('keymap', 0), ('stimNum', 31), ('stimID', 'stim_CR/CR_B_31.png')]), OrderedDict([('cpi', -58.6304012082429), ('deg', 42.2434667684791), ('keymap', 0), ('stimNum', 32), ('stimID', 'stim_CR/CR_B_32.png')]), OrderedDict([('cpi', -54.7676627607359), ('deg', 54.1206103472629), ('keymap', 0), ('stimNum', 33), ('stimID', 'stim_CR/CR_B_33.png')]), OrderedDict([('cpi', -65.2296477434863), ('deg', 37.2362859620983), ('keymap', 0), ('stimNum', 34), ('stimID', 'stim_CR/CR_B_34.png')]), OrderedDict([('cpi', -59.7783060291745), ('deg', 46.779291841004), ('keymap', 0), ('stimNum', 35), ('stimID', 'stim_CR/CR_B_35.png')]), OrderedDict([('cpi', -49.2890902147673), ('deg', 76.4422526564066), ('keymap', 0), ('stimNum', 36), ('stimID', 'stim_CR/CR_B_36.png')]), OrderedDict([('cpi', -52.5998401091747), ('deg', 46.0895998265776), ('keymap', 0), ('stimNum', 37), ('stimID', 'stim_CR/CR_B_37.png')]), OrderedDict([('cpi', -32.1959221948504), ('deg', 52.7174077908945), ('keymap', 0), ('stimNum', 38), ('stimID', 'stim_CR/CR_B_38.png')]), OrderedDict([('cpi', -39.894410380737), ('deg', 75.5217664589195), ('keymap', 0), ('stimNum', 39), ('stimID', 'stim_CR/CR_B_39.png')]), OrderedDict([('cpi', -47.2531903834977), ('deg', 45.5550284308811), ('keymap', 0), ('stimNum', 40), ('stimID', 'stim_CR/CR_B_40.png')]), OrderedDict([('cpi', -18.4660674535209), ('deg', 69.9826394035576), ('keymap', 0), ('stimNum', 41), ('stimID', 'stim_CR/CR_B_41.png')]), OrderedDict([('cpi', -45.6531499307085), ('deg', 60.1508486538332), ('keymap', 0), ('stimNum', 42), ('stimID', 'stim_CR/CR_B_42.png')]), OrderedDict([('cpi', -38.3827385540651), ('deg', 39.5354014947758), ('keymap', 0), ('stimNum', 43), ('stimID', 'stim_CR/CR_B_43.png')]), OrderedDict([('cpi', -45.1156705632827), ('deg', 56.5221221216479), ('keymap', 0), ('stimNum', 44), ('stimID', 'stim_CR/CR_B_44.png')]), OrderedDict([('cpi', -66.2224246636918), ('deg', 32.434320207957), ('keymap', 0), ('stimNum', 45), ('stimID', 'stim_CR/CR_B_45.png')]), OrderedDict([('cpi', -62.2426983788276), ('deg', 57.7234295405528), ('keymap', 0), ('stimNum', 46), ('stimID', 'stim_CR/CR_B_46.png')]), OrderedDict([('cpi', -30.645306837035), ('deg', 27.8931967702332), ('keymap', 0), ('stimNum', 47), ('stimID', 'stim_CR/CR_B_47.png')]), OrderedDict([('cpi', -31.2642790249342), ('deg', 70.6114162850727), ('keymap', 0), ('stimNum', 48), ('stimID', 'stim_CR/CR_B_48.png')]), OrderedDict([('cpi', -42.8063741375368), ('deg', 45.3770924404332), ('keymap', 0), ('stimNum', 49), ('stimID', 'stim_CR/CR_B_49.png')]), OrderedDict([('cpi', -54.4352830153273), ('deg', 43.0025105432106), ('keymap', 0), ('stimNum', 50), ('stimID', 'stim_CR/CR_B_50.png')]), OrderedDict([('cpi', -53.3510389451876), ('deg', -62.0982981388479), ('keymap', 0), ('stimNum', 51), ('stimID', 'stim_CR/CR_B_51.png')]), OrderedDict([('cpi', -49.9702255632954), ('deg', -29.2885739057262), ('keymap', 0), ('stimNum', 52), ('stimID', 'stim_CR/CR_B_52.png')]), OrderedDict([('cpi', -72.6062682304754), ('deg', -34.4239809203911), ('keymap', 0), ('stimNum', 53), ('stimID', 'stim_CR/CR_B_53.png')]), OrderedDict([('cpi', -71.8807164304096), ('deg', -56.5515593454543), ('keymap', 0), ('stimNum', 54), ('stimID', 'stim_CR/CR_B_54.png')]), OrderedDict([('cpi', -66.3075184380139), ('deg', -33.3178845105711), ('keymap', 0), ('stimNum', 55), ('stimID', 'stim_CR/CR_B_55.png')]), OrderedDict([('cpi', -50.4193058305074), ('deg', -23.3127019446237), ('keymap', 0), ('stimNum', 56), ('stimID', 'stim_CR/CR_B_56.png')]), OrderedDict([('cpi', -36.6359803130228), ('deg', -55.435027298097), ('keymap', 0), ('stimNum', 57), ('stimID', 'stim_CR/CR_B_57.png')]), OrderedDict([('cpi', -27.9797693201438), ('deg', -60.7531793395018), ('keymap', 0), ('stimNum', 58), ('stimID', 'stim_CR/CR_B_58.png')]), OrderedDict([('cpi', -31.6511432343829), ('deg', -72.7146552551132), ('keymap', 0), ('stimNum', 59), ('stimID', 'stim_CR/CR_B_59.png')]), OrderedDict([('cpi', -38.0396292961116), ('deg', -63.7894785792206), ('keymap', 0), ('stimNum', 60), ('stimID', 'stim_CR/CR_B_60.png')]), OrderedDict([('cpi', -34.0312640600103), ('deg', -24.1597417763529), ('keymap', 0), ('stimNum', 61), ('stimID', 'stim_CR/CR_B_61.png')]), OrderedDict([('cpi', -81.5494973796928), ('deg', -73.3417029153113), ('keymap', 0), ('stimNum', 62), ('stimID', 'stim_CR/CR_B_62.png')]), OrderedDict([('cpi', -46.9324511305401), ('deg', -26.6489706758595), ('keymap', 0), ('stimNum', 63), ('stimID', 'stim_CR/CR_B_63.png')]), OrderedDict([('cpi', -73.3427224619658), ('deg', -70.5914515641557), ('keymap', 0), ('stimNum', 64), ('stimID', 'stim_CR/CR_B_64.png')]), OrderedDict([('cpi', -43.1572171282134), ('deg', -49.3960273218867), ('keymap', 0), ('stimNum', 65), ('stimID', 'stim_CR/CR_B_65.png')]), OrderedDict([('cpi', -41.3932626690136), ('deg', -49.1168924471541), ('keymap', 0), ('stimNum', 66), ('stimID', 'stim_CR/CR_B_66.png')]), OrderedDict([('cpi', -21.3295993497819), ('deg', -70.529298075128), ('keymap', 0), ('stimNum', 67), ('stimID', 'stim_CR/CR_B_67.png')]), OrderedDict([('cpi', -39.7467437208415), ('deg', -87.1945385883205), ('keymap', 0), ('stimNum', 68), ('stimID', 'stim_CR/CR_B_68.png')]), OrderedDict([('cpi', -55.7354501451091), ('deg', -31.1589069060149), ('keymap', 0), ('stimNum', 69), ('stimID', 'stim_CR/CR_B_69.png')]), OrderedDict([('cpi', -45.3924284995365), ('deg', -63.7262730858998), ('keymap', 0), ('stimNum', 70), ('stimID', 'stim_CR/CR_B_70.png')]), OrderedDict([('cpi', -78.7224805152417), ('deg', -76.9470812442731), ('keymap', 0), ('stimNum', 71), ('stimID', 'stim_CR/CR_B_71.png')]), OrderedDict([('cpi', -55.7779472359924), ('deg', -80.1229993645597), ('keymap', 0), ('stimNum', 72), ('stimID', 'stim_CR/CR_B_72.png')]), OrderedDict([('cpi', -35.9283772660782), ('deg', -58.6685424030923), ('keymap', 0), ('stimNum', 73), ('stimID', 'stim_CR/CR_B_73.png')]), OrderedDict([('cpi', -63.6764612924517), ('deg', -29.459643070845), ('keymap', 0), ('stimNum', 74), ('stimID', 'stim_CR/CR_B_74.png')]), OrderedDict([('cpi', -52.0411756438864), ('deg', -54.3838450121915), ('keymap', 0), ('stimNum', 75), ('stimID', 'stim_CR/CR_B_75.png')]), OrderedDict([('cpi', -52.5258264999922), ('deg', -58.9417445274083), ('keymap', 0), ('stimNum', 76), ('stimID', 'stim_CR/CR_B_76.png')]), OrderedDict([('cpi', -24.9337414211829), ('deg', -47.6993060130166), ('keymap', 0), ('stimNum', 77), ('stimID', 'stim_CR/CR_B_77.png')]), OrderedDict([('cpi', -50.5230301693515), ('deg', -51.9111495910172), ('keymap', 0), ('stimNum', 78), ('stimID', 'stim_CR/CR_B_78.png')]), OrderedDict([('cpi', -47.6183270418248), ('deg', -74.950291463558), ('keymap', 0), ('stimNum', 79), ('stimID', 'stim_CR/CR_B_79.png')]), OrderedDict([('cpi', -54.1816769097572), ('deg', -15.1853158007544), ('keymap', 0), ('stimNum', 80), ('stimID', 'stim_CR/CR_B_80.png')]), OrderedDict([('cpi', -78.4692497464398), ('deg', -43.1821236126144), ('keymap', 0), ('stimNum', 81), ('stimID', 'stim_CR/CR_B_81.png')]), OrderedDict([('cpi', -52.1650797054153), ('deg', -40.8431904515571), ('keymap', 0), ('stimNum', 82), ('stimID', 'stim_CR/CR_B_82.png')]), OrderedDict([('cpi', -63.6987941039739), ('deg', -55.2267840575613), ('keymap', 0), ('stimNum', 83), ('stimID', 'stim_CR/CR_B_83.png')]), OrderedDict([('cpi', -41.1827713307496), ('deg', -68.7393736129382), ('keymap', 0), ('stimNum', 84), ('stimID', 'stim_CR/CR_B_84.png')]), OrderedDict([('cpi', -38.4672373314548), ('deg', -46.2942311436414), ('keymap', 0), ('stimNum', 85), ('stimID', 'stim_CR/CR_B_85.png')]), OrderedDict([('cpi', -8.05316898299712), ('deg', -56.0194372502919), ('keymap', 0), ('stimNum', 86), ('stimID', 'stim_CR/CR_B_86.png')]), OrderedDict([('cpi', -34.6408259453437), ('deg', -50.1645302356922), ('keymap', 0), ('stimNum', 87), ('stimID', 'stim_CR/CR_B_87.png')]), OrderedDict([('cpi', -57.9579352606209), ('deg', -39.6828323271936), ('keymap', 0), ('stimNum', 88), ('stimID', 'stim_CR/CR_B_88.png')]), OrderedDict([('cpi', -61.8152185307336), ('deg', -37.8656274857602), ('keymap', 0), ('stimNum', 89), ('stimID', 'stim_CR/CR_B_89.png')]), OrderedDict([('cpi', -51.0346002386572), ('deg', -63.2323946339165), ('keymap', 0), ('stimNum', 90), ('stimID', 'stim_CR/CR_B_90.png')]), OrderedDict([('cpi', -43.1149348010452), ('deg', -78.920033250887), ('keymap', 0), ('stimNum', 91), ('stimID', 'stim_CR/CR_B_91.png')]), OrderedDict([('cpi', -52.243870488049), ('deg', -35.3944427662021), ('keymap', 0), ('stimNum', 92), ('stimID', 'stim_CR/CR_B_92.png')]), OrderedDict([('cpi', -73.6076750026092), ('deg', -33.4912079793216), ('keymap', 0), ('stimNum', 93), ('stimID', 'stim_CR/CR_B_93.png')]), OrderedDict([('cpi', -38.5683368923861), ('deg', -38.7159973515344), ('keymap', 0), ('stimNum', 94), ('stimID', 'stim_CR/CR_B_94.png')]), OrderedDict([('cpi', -64.1387637830866), ('deg', -64.6304751523762), ('keymap', 0), ('stimNum', 95), ('stimID', 'stim_CR/CR_B_95.png')]), OrderedDict([('cpi', -46.5742719093098), ('deg', -43.2507639808615), ('keymap', 0), ('stimNum', 96), ('stimID', 'stim_CR/CR_B_96.png')]), OrderedDict([('cpi', -52.0005060637082), ('deg', -36.5581061481564), ('keymap', 0), ('stimNum', 97), ('stimID', 'stim_CR/CR_B_97.png')]), OrderedDict([('cpi', -60.0070655221055), ('deg', -12.7983146403872), ('keymap', 0), ('stimNum', 98), ('stimID', 'stim_CR/CR_B_98.png')]), OrderedDict([('cpi', -38.8822681853422), ('deg', -68.905309747494), ('keymap', 0), ('stimNum', 99), ('stimID', 'stim_CR/CR_B_99.png')]), OrderedDict([('cpi', -36.4427513397535), ('deg', -35.9312101635732), ('keymap', 0), ('stimNum', 100), ('stimID', 'stim_CR/CR_B_100.png')]), OrderedDict([('cpi', 52.9191908557486), ('deg', -46.936865730932), ('keymap', 0), ('stimNum', 101), ('stimID', 'stim_CR/CR_B_101.png')]), OrderedDict([('cpi', 43.6071647806495), ('deg', -72.68975707922), ('keymap', 0), ('stimNum', 102), ('stimID', 'stim_CR/CR_B_102.png')]), OrderedDict([('cpi', 48.969500915501), ('deg', -26.3450809027049), ('keymap', 0), ('stimNum', 103), ('stimID', 'stim_CR/CR_B_103.png')]), OrderedDict([('cpi', 49.0290880109167), ('deg', -37.7872717626417), ('keymap', 0), ('stimNum', 104), ('stimID', 'stim_CR/CR_B_104.png')]), OrderedDict([('cpi', 10.7724061928371), ('deg', -70.6113752338299), ('keymap', 0), ('stimNum', 105), ('stimID', 'stim_CR/CR_B_105.png')]), OrderedDict([('cpi', 56.2328570025418), ('deg', -41.3898792034523), ('keymap', 0), ('stimNum', 106), ('stimID', 'stim_CR/CR_B_106.png')]), OrderedDict([('cpi', 30.324413093475), ('deg', -42.2439594101954), ('keymap', 0), ('stimNum', 107), ('stimID', 'stim_CR/CR_B_107.png')]), OrderedDict([('cpi', 36.3959517831151), ('deg', -69.773761678935), ('keymap', 0), ('stimNum', 108), ('stimID', 'stim_CR/CR_B_108.png')]), OrderedDict([('cpi', 64.0153216593383), ('deg', -44.3576568296442), ('keymap', 0), ('stimNum', 109), ('stimID', 'stim_CR/CR_B_109.png')]), OrderedDict([('cpi', 34.5702074803448), ('deg', -32.924125968834), ('keymap', 0), ('stimNum', 110), ('stimID', 'stim_CR/CR_B_110.png')]), OrderedDict([('cpi', 77.5457416513336), ('deg', -30.1744554466583), ('keymap', 0), ('stimNum', 111), ('stimID', 'stim_CR/CR_B_111.png')]), OrderedDict([('cpi', 54.33443845104), ('deg', -60.3185282337646), ('keymap', 0), ('stimNum', 112), ('stimID', 'stim_CR/CR_B_112.png')]), OrderedDict([('cpi', 52.7643062667983), ('deg', -69.6792157488435), ('keymap', 0), ('stimNum', 113), ('stimID', 'stim_CR/CR_B_113.png')]), OrderedDict([('cpi', 64.3905489078739), ('deg', -56.0159384918775), ('keymap', 0), ('stimNum', 114), ('stimID', 'stim_CR/CR_B_114.png')]), OrderedDict([('cpi', 33.5632084238348), ('deg', -50.5237095401282), ('keymap', 0), ('stimNum', 115), ('stimID', 'stim_CR/CR_B_115.png')]), OrderedDict([('cpi', 57.3371805798868), ('deg', -87.5000444449728), ('keymap', 0), ('stimNum', 116), ('stimID', 'stim_CR/CR_B_116.png')]), OrderedDict([('cpi', 33.5905914781457), ('deg', -51.2039216311638), ('keymap', 0), ('stimNum', 117), ('stimID', 'stim_CR/CR_B_117.png')]), OrderedDict([('cpi', 67.2604966816106), ('deg', -49.5442961668645), ('keymap', 0), ('stimNum', 118), ('stimID', 'stim_CR/CR_B_118.png')]), OrderedDict([('cpi', 70.1179996828352), ('deg', -52.4568370054186), ('keymap', 0), ('stimNum', 119), ('stimID', 'stim_CR/CR_B_119.png')]), OrderedDict([('cpi', 52.0310171830081), ('deg', -60.6609741449218), ('keymap', 0), ('stimNum', 120), ('stimID', 'stim_CR/CR_B_120.png')]), OrderedDict([('cpi', 49.2686618725289), ('deg', -61.7732104620355), ('keymap', 0), ('stimNum', 121), ('stimID', 'stim_CR/CR_B_121.png')]), OrderedDict([('cpi', 52.9459680500859), ('deg', -55.3539504675723), ('keymap', 0), ('stimNum', 122), ('stimID', 'stim_CR/CR_B_122.png')]), OrderedDict([('cpi', 40.6404933959545), ('deg', -80.9733863490256), ('keymap', 0), ('stimNum', 123), ('stimID', 'stim_CR/CR_B_123.png')]), OrderedDict([('cpi', 53.3198969244442), ('deg', -83.3777503284543), ('keymap', 0), ('stimNum', 124), ('stimID', 'stim_CR/CR_B_124.png')]), OrderedDict([('cpi', 33.2938827179265), ('deg', -55.8050441560065), ('keymap', 0), ('stimNum', 125), ('stimID', 'stim_CR/CR_B_125.png')]), OrderedDict([('cpi', 61.4595269885193), ('deg', -43.5322460081063), ('keymap', 0), ('stimNum', 126), ('stimID', 'stim_CR/CR_B_126.png')]), OrderedDict([('cpi', 45.9901987374477), ('deg', -51.5424158869413), ('keymap', 0), ('stimNum', 127), ('stimID', 'stim_CR/CR_B_127.png')]), OrderedDict([('cpi', 25.3487915131383), ('deg', -68.4447000772886), ('keymap', 0), ('stimNum', 128), ('stimID', 'stim_CR/CR_B_128.png')]), OrderedDict([('cpi', 67.2392123796793), ('deg', -49.3597740621616), ('keymap', 0), ('stimNum', 129), ('stimID', 'stim_CR/CR_B_129.png')]), OrderedDict([('cpi', 69.7329254399393), ('deg', -67.224808479072), ('keymap', 0), ('stimNum', 130), ('stimID', 'stim_CR/CR_B_130.png')]), OrderedDict([('cpi', 31.4356992277353), ('deg', -62.2606595200923), ('keymap', 0), ('stimNum', 131), ('stimID', 'stim_CR/CR_B_131.png')]), OrderedDict([('cpi', 61.9470523212698), ('deg', -57.4499431373936), ('keymap', 0), ('stimNum', 132), ('stimID', 'stim_CR/CR_B_132.png')]), OrderedDict([('cpi', 35.0789383384885), ('deg', -55.0019777969301), ('keymap', 0), ('stimNum', 133), ('stimID', 'stim_CR/CR_B_133.png')]), OrderedDict([('cpi', 48.3434817241818), ('deg', -57.5780422814132), ('keymap', 0), ('stimNum', 134), ('stimID', 'stim_CR/CR_B_134.png')]), OrderedDict([('cpi', 33.0260563826655), ('deg', -47.891506121119), ('keymap', 0), ('stimNum', 135), ('stimID', 'stim_CR/CR_B_135.png')]), OrderedDict([('cpi', 27.7812141410285), ('deg', -46.5897836626668), ('keymap', 0), ('stimNum', 136), ('stimID', 'stim_CR/CR_B_136.png')]), OrderedDict([('cpi', 9.71493551204374), ('deg', -67.3679400722541), ('keymap', 0), ('stimNum', 137), ('stimID', 'stim_CR/CR_B_137.png')]), OrderedDict([('cpi', 58.3187160539658), ('deg', -60.130730153877), ('keymap', 0), ('stimNum', 138), ('stimID', 'stim_CR/CR_B_138.png')]), OrderedDict([('cpi', 23.0909931534975), ('deg', -60.3117652623962), ('keymap', 0), ('stimNum', 139), ('stimID', 'stim_CR/CR_B_139.png')]), OrderedDict([('cpi', 45.1947676896457), ('deg', -25.0293548159515), ('keymap', 0), ('stimNum', 140), ('stimID', 'stim_CR/CR_B_140.png')]), OrderedDict([('cpi', 53.6092688229018), ('deg', -58.9450954769179), ('keymap', 0), ('stimNum', 141), ('stimID', 'stim_CR/CR_B_141.png')]), OrderedDict([('cpi', 21.8619007726415), ('deg', -41.9043288598144), ('keymap', 0), ('stimNum', 142), ('stimID', 'stim_CR/CR_B_142.png')]), OrderedDict([('cpi', 38.5444009640193), ('deg', -44.7835822972557), ('keymap', 0), ('stimNum', 143), ('stimID', 'stim_CR/CR_B_143.png')]), OrderedDict([('cpi', 33.3845958854886), ('deg', -64.211801076393), ('keymap', 0), ('stimNum', 144), ('stimID', 'stim_CR/CR_B_144.png')]), OrderedDict([('cpi', 45.1958501738401), ('deg', -56.1246671256351), ('keymap', 0), ('stimNum', 145), ('stimID', 'stim_CR/CR_B_145.png')]), OrderedDict([('cpi', 38.5243332696622), ('deg', -68.2959443283235), ('keymap', 0), ('stimNum', 146), ('stimID', 'stim_CR/CR_B_146.png')]), OrderedDict([('cpi', 78.0258606904468), ('deg', -75.1593370598277), ('keymap', 0), ('stimNum', 147), ('stimID', 'stim_CR/CR_B_147.png')]), OrderedDict([('cpi', 54.6574624998125), ('deg', -71.9056083924654), ('keymap', 0), ('stimNum', 148), ('stimID', 'stim_CR/CR_B_148.png')]), OrderedDict([('cpi', 38.2422350584893), ('deg', -31.7281325865769), ('keymap', 0), ('stimNum', 149), ('stimID', 'stim_CR/CR_B_149.png')]), OrderedDict([('cpi', 63.8604652951887), ('deg', -37.8074137623967), ('keymap', 0), ('stimNum', 150), ('stimID', 'stim_CR/CR_B_150.png')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="CR_coord_arbitrary.csv" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="num"/>
      <Param name="name" updates="None" val="learnLoop" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="learnTrial"/>
    <Routine name="learnFb"/>
    <LoopTerminator name="learnLoop"/>
    <Routine name="rest0"/>
    <LoopInitiator loopType="TrialHandler" name="blockLoop">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="False" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="6" valType="num"/>
      <Param name="name" updates="None" val="blockLoop" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <LoopInitiator loopType="TrialHandler" name="gaborLoop">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('cpi', 32.7989956994058), ('deg', 39.7928511961921), ('keymap', 1), ('stimNum', 1), ('stimID', 'stim_CR/CR_A_1.png')]), OrderedDict([('cpi', 46.6016562019535), ('deg', 74.7022902898009), ('keymap', 1), ('stimNum', 2), ('stimID', 'stim_CR/CR_A_2.png')]), OrderedDict([('cpi', 44.3537936228233), ('deg', 80.6072195661703), ('keymap', 1), ('stimNum', 3), ('stimID', 'stim_CR/CR_A_3.png')]), OrderedDict([('cpi', 55.4742466120659), ('deg', 71.4500569481669), ('keymap', 1), ('stimNum', 4), ('stimID', 'stim_CR/CR_A_4.png')]), OrderedDict([('cpi', 59.8206802679876), ('deg', 48.9675497918339), ('keymap', 1), ('stimNum', 5), ('stimID', 'stim_CR/CR_A_5.png')]), OrderedDict([('cpi', 69.1430628740741), ('deg', 67.5613368762024), ('keymap', 1), ('stimNum', 6), ('stimID', 'stim_CR/CR_A_6.png')]), OrderedDict([('cpi', 50.1430839358375), ('deg', 48.546135871112), ('keymap', 1), ('stimNum', 7), ('stimID', 'stim_CR/CR_A_7.png')]), OrderedDict([('cpi', 73.8143508558617), ('deg', 65.1719996557286), ('keymap', 1), ('stimNum', 8), ('stimID', 'stim_CR/CR_A_8.png')]), OrderedDict([('cpi', 64.344191618972), ('deg', 43.9700782752635), ('keymap', 1), ('stimNum', 9), ('stimID', 'stim_CR/CR_A_9.png')]), OrderedDict([('cpi', 72.8338551348971), ('deg', 64.7935414182491), ('keymap', 1), ('stimNum', 10), ('stimID', 'stim_CR/CR_A_10.png')]), OrderedDict([('cpi', 70.9795848467393), ('deg', 43.88420402559), ('keymap', 1), ('stimNum', 11), ('stimID', 'stim_CR/CR_A_11.png')]), OrderedDict([('cpi', 53.2624659696482), ('deg', 53.8878571028894), ('keymap', 1), ('stimNum', 12), ('stimID', 'stim_CR/CR_A_12.png')]), OrderedDict([('cpi', 40.709670210437), ('deg', 59.3837701978012), ('keymap', 1), ('stimNum', 13), ('stimID', 'stim_CR/CR_A_13.png')]), OrderedDict([('cpi', 40.5693478466145), ('deg', 45.20394459486), ('keymap', 1), ('stimNum', 14), ('stimID', 'stim_CR/CR_A_14.png')]), OrderedDict([('cpi', 30.6324525503709), ('deg', 56.6537416693706), ('keymap', 1), ('stimNum', 15), ('stimID', 'stim_CR/CR_A_15.png')]), OrderedDict([('cpi', 42.5788829011567), ('deg', 62.4418903972774), ('keymap', 1), ('stimNum', 16), ('stimID', 'stim_CR/CR_A_16.png')]), OrderedDict([('cpi', 33.7016805460695), ('deg', 76.8107362831947), ('keymap', 1), ('stimNum', 17), ('stimID', 'stim_CR/CR_A_17.png')]), OrderedDict([('cpi', 49.8380360062855), ('deg', 73.1300064342994), ('keymap', 1), ('stimNum', 18), ('stimID', 'stim_CR/CR_A_18.png')]), OrderedDict([('cpi', 55.6987319317251), ('deg', 51.4839947072907), ('keymap', 1), ('stimNum', 19), ('stimID', 'stim_CR/CR_A_19.png')]), OrderedDict([('cpi', 50.5287072846779), ('deg', 65.4519474541447), ('keymap', 1), ('stimNum', 20), ('stimID', 'stim_CR/CR_A_20.png')]), OrderedDict([('cpi', 57.2689707306023), ('deg', 30.9223240331117), ('keymap', 1), ('stimNum', 21), ('stimID', 'stim_CR/CR_A_21.png')]), OrderedDict([('cpi', 44.1030975470715), ('deg', 46.5856721358858), ('keymap', 1), ('stimNum', 22), ('stimID', 'stim_CR/CR_A_22.png')]), OrderedDict([('cpi', 47.3954052298861), ('deg', 51.533646742366), ('keymap', 1), ('stimNum', 23), ('stimID', 'stim_CR/CR_A_23.png')]), OrderedDict([('cpi', 33.7808463745506), ('deg', 45.4016048998041), ('keymap', 1), ('stimNum', 24), ('stimID', 'stim_CR/CR_A_24.png')]), OrderedDict([('cpi', 45.3149939524157), ('deg', 59.8922737958413), ('keymap', 1), ('stimNum', 25), ('stimID', 'stim_CR/CR_A_25.png')]), OrderedDict([('cpi', 52.8735294948481), ('deg', 38.2567587887309), ('keymap', 1), ('stimNum', 26), ('stimID', 'stim_CR/CR_A_26.png')]), OrderedDict([('cpi', 61.8897905089942), ('deg', 70.6613299223959), ('keymap', 1), ('stimNum', 27), ('stimID', 'stim_CR/CR_A_27.png')]), OrderedDict([('cpi', 44.0323010991113), ('deg', 61.885837031464), ('keymap', 1), ('stimNum', 28), ('stimID', 'stim_CR/CR_A_28.png')]), OrderedDict([('cpi', 50.297341473014), ('deg', 43.6415550537495), ('keymap', 1), ('stimNum', 29), ('stimID', 'stim_CR/CR_A_29.png')]), OrderedDict([('cpi', 52.5812999878706), ('deg', 28.5622923239139), ('keymap', 1), ('stimNum', 30), ('stimID', 'stim_CR/CR_A_30.png')]), OrderedDict([('cpi', 37.0093462413072), ('deg', 28.646972413869), ('keymap', 1), ('stimNum', 31), ('stimID', 'stim_CR/CR_A_31.png')]), OrderedDict([('cpi', 91.4257615366426), ('deg', 44.6847031930346), ('keymap', 1), ('stimNum', 32), ('stimID', 'stim_CR/CR_A_32.png')]), OrderedDict([('cpi', 67.0753251796034), ('deg', 53.6700910367889), ('keymap', 1), ('stimNum', 33), ('stimID', 'stim_CR/CR_A_33.png')]), OrderedDict([('cpi', 48.0894195745622), ('deg', 60.0450091669001), ('keymap', 1), ('stimNum', 34), ('stimID', 'stim_CR/CR_A_34.png')]), OrderedDict([('cpi', 42.7207841610123), ('deg', 55.8379375344341), ('keymap', 1), ('stimNum', 35), ('stimID', 'stim_CR/CR_A_35.png')]), OrderedDict([('cpi', 51.7828687295719), ('deg', 44.337244641531), ('keymap', 1), ('stimNum', 36), ('stimID', 'stim_CR/CR_A_36.png')]), OrderedDict([('cpi', 36.667968408262), ('deg', 53.8629277551519), ('keymap', 1), ('stimNum', 37), ('stimID', 'stim_CR/CR_A_37.png')]), OrderedDict([('cpi', 49.2079670688276), ('deg', 45.6641237773519), ('keymap', 1), ('stimNum', 38), ('stimID', 'stim_CR/CR_A_38.png')]), OrderedDict([('cpi', 27.0744216706263), ('deg', 68.6866329428609), ('keymap', 1), ('stimNum', 39), ('stimID', 'stim_CR/CR_A_39.png')]), OrderedDict([('cpi', 43.1969672094227), ('deg', 49.7301784387126), ('keymap', 1), ('stimNum', 40), ('stimID', 'stim_CR/CR_A_40.png')]), OrderedDict([('cpi', 43.8136060135285), ('deg', 43.1752174023293), ('keymap', 1), ('stimNum', 41), ('stimID', 'stim_CR/CR_A_41.png')]), OrderedDict([('cpi', 43.7938550674785), ('deg', 55.105241720835), ('keymap', 1), ('stimNum', 42), ('stimID', 'stim_CR/CR_A_42.png')]), OrderedDict([('cpi', 47.2677371113093), ('deg', 50.1004869527194), ('keymap', 1), ('stimNum', 43), ('stimID', 'stim_CR/CR_A_43.png')]), OrderedDict([('cpi', 30.9896093357586), ('deg', 48.6290803584966), ('keymap', 1), ('stimNum', 44), ('stimID', 'stim_CR/CR_A_44.png')]), OrderedDict([('cpi', 33.7453551578001), ('deg', 30.4881675776706), ('keymap', 1), ('stimNum', 45), ('stimID', 'stim_CR/CR_A_45.png')]), OrderedDict([('cpi', 70.3372215654848), ('deg', 18.1632501419915), ('keymap', 1), ('stimNum', 46), ('stimID', 'stim_CR/CR_A_46.png')]), OrderedDict([('cpi', 48.4614383405167), ('deg', 36.3945112989206), ('keymap', 1), ('stimNum', 47), ('stimID', 'stim_CR/CR_A_47.png')]), OrderedDict([('cpi', 25.3288722194637), ('deg', 58.4819022577577), ('keymap', 1), ('stimNum', 48), ('stimID', 'stim_CR/CR_A_48.png')]), OrderedDict([('cpi', 70.4809900670313), ('deg', 58.0455109096441), ('keymap', 1), ('stimNum', 49), ('stimID', 'stim_CR/CR_A_49.png')]), OrderedDict([('cpi', 36.6824224376862), ('deg', 49.4112274463665), ('keymap', 1), ('stimNum', 50), ('stimID', 'stim_CR/CR_A_50.png')]), OrderedDict([('cpi', 64.6130094975805), ('deg', 22.144627053452), ('keymap', 1), ('stimNum', 51), ('stimID', 'stim_CR/CR_A_51.png')]), OrderedDict([('cpi', 59.664773828093), ('deg', 76.3303121510464), ('keymap', 1), ('stimNum', 52), ('stimID', 'stim_CR/CR_A_52.png')]), OrderedDict([('cpi', 42.0701859712854), ('deg', 34.9648628656892), ('keymap', 1), ('stimNum', 53), ('stimID', 'stim_CR/CR_A_53.png')]), OrderedDict([('cpi', 36.8906236360869), ('deg', 28.2299283100366), ('keymap', 1), ('stimNum', 54), ('stimID', 'stim_CR/CR_A_54.png')]), OrderedDict([('cpi', 31.2088714696452), ('deg', 49.2801010122541), ('keymap', 1), ('stimNum', 55), ('stimID', 'stim_CR/CR_A_55.png')]), OrderedDict([('cpi', 58.3413668129662), ('deg', 57.3661478205865), ('keymap', 1), ('stimNum', 56), ('stimID', 'stim_CR/CR_A_56.png')]), OrderedDict([('cpi', 78.3049471504746), ('deg', 37.6043588780278), ('keymap', 1), ('stimNum', 57), ('stimID', 'stim_CR/CR_A_57.png')]), OrderedDict([('cpi', 65.6283188854112), ('deg', 44.8299169079058), ('keymap', 1), ('stimNum', 58), ('stimID', 'stim_CR/CR_A_58.png')]), OrderedDict([('cpi', 42.2172524854811), ('deg', 65.7949120730595), ('keymap', 1), ('stimNum', 59), ('stimID', 'stim_CR/CR_A_59.png')]), OrderedDict([('cpi', 49.9372218655609), ('deg', 47.4190891870895), ('keymap', 1), ('stimNum', 60), ('stimID', 'stim_CR/CR_A_60.png')]), OrderedDict([('cpi', 51.6041418342984), ('deg', 46.4860280877074), ('keymap', 1), ('stimNum', 61), ('stimID', 'stim_CR/CR_A_61.png')]), OrderedDict([('cpi', 59.775000028412), ('deg', 39.5150487779416), ('keymap', 1), ('stimNum', 62), ('stimID', 'stim_CR/CR_A_62.png')]), OrderedDict([('cpi', 62.1605016423724), ('deg', 48.8670920009006), ('keymap', 1), ('stimNum', 63), ('stimID', 'stim_CR/CR_A_63.png')]), OrderedDict([('cpi', 33.0094973938307), ('deg', 32.465770159379), ('keymap', 1), ('stimNum', 64), ('stimID', 'stim_CR/CR_A_64.png')]), OrderedDict([('cpi', 86.6552821790885), ('deg', 38.1675834151919), ('keymap', 1), ('stimNum', 65), ('stimID', 'stim_CR/CR_A_65.png')]), OrderedDict([('cpi', 51.1202591723487), ('deg', 36.0261146048551), ('keymap', 1), ('stimNum', 66), ('stimID', 'stim_CR/CR_A_66.png')]), OrderedDict([('cpi', 34.2401912180322), ('deg', 50.8047168386076), ('keymap', 1), ('stimNum', 67), ('stimID', 'stim_CR/CR_A_67.png')]), OrderedDict([('cpi', 37.1557840298365), ('deg', 38.3897706040043), ('keymap', 1), ('stimNum', 68), ('stimID', 'stim_CR/CR_A_68.png')]), OrderedDict([('cpi', 45.5685707470678), ('deg', 75.1293762549424), ('keymap', 1), ('stimNum', 69), ('stimID', 'stim_CR/CR_A_69.png')]), OrderedDict([('cpi', 29.8037849036203), ('deg', 51.9969192150458), ('keymap', 1), ('stimNum', 70), ('stimID', 'stim_CR/CR_A_70.png')]), OrderedDict([('cpi', 52.517529367084), ('deg', 61.6021371417258), ('keymap', 1), ('stimNum', 71), ('stimID', 'stim_CR/CR_A_71.png')]), OrderedDict([('cpi', 60.1738913823841), ('deg', 49.2459195928322), ('keymap', 1), ('stimNum', 72), ('stimID', 'stim_CR/CR_A_72.png')]), OrderedDict([('cpi', 77.4666641737514), ('deg', 56.714861044714), ('keymap', 1), ('stimNum', 73), ('stimID', 'stim_CR/CR_A_73.png')]), OrderedDict([('cpi', 37.1958689418928), ('deg', 54.7099661922963), ('keymap', 1), ('stimNum', 74), ('stimID', 'stim_CR/CR_A_74.png')]), OrderedDict([('cpi', 64.9864222849275), ('deg', 51.1481731574566), ('keymap', 1), ('stimNum', 75), ('stimID', 'stim_CR/CR_A_75.png')]), OrderedDict([('cpi', 53.8373157063797), ('deg', 66.1695972048739), ('keymap', 1), ('stimNum', 76), ('stimID', 'stim_CR/CR_A_76.png')]), OrderedDict([('cpi', 61.0555816061788), ('deg', 41.1844314428034), ('keymap', 1), ('stimNum', 77), ('stimID', 'stim_CR/CR_A_77.png')]), OrderedDict([('cpi', 71.424956267416), ('deg', 57.600419408491), ('keymap', 1), ('stimNum', 78), ('stimID', 'stim_CR/CR_A_78.png')]), OrderedDict([('cpi', 59.1552207588489), ('deg', 49.3141633417892), ('keymap', 1), ('stimNum', 79), ('stimID', 'stim_CR/CR_A_79.png')]), OrderedDict([('cpi', 30.2073581473777), ('deg', 41.1218830435595), ('keymap', 1), ('stimNum', 80), ('stimID', 'stim_CR/CR_A_80.png')]), OrderedDict([('cpi', 48.3238192450286), ('deg', 39.4640022333872), ('keymap', 1), ('stimNum', 81), ('stimID', 'stim_CR/CR_A_81.png')]), OrderedDict([('cpi', 32.7103535734978), ('deg', 66.6429134179288), ('keymap', 1), ('stimNum', 82), ('stimID', 'stim_CR/CR_A_82.png')]), OrderedDict([('cpi', 40.3297112462578), ('deg', 54.9149488811312), ('keymap', 1), ('stimNum', 83), ('stimID', 'stim_CR/CR_A_83.png')]), OrderedDict([('cpi', 57.5370528038034), ('deg', 42.0086306938252), ('keymap', 1), ('stimNum', 84), ('stimID', 'stim_CR/CR_A_84.png')]), OrderedDict([('cpi', 67.2393385281148), ('deg', 40.2372096153867), ('keymap', 1), ('stimNum', 85), ('stimID', 'stim_CR/CR_A_85.png')]), OrderedDict([('cpi', 44.1313688160103), ('deg', 74.6190609304769), ('keymap', 1), ('stimNum', 86), ('stimID', 'stim_CR/CR_A_86.png')]), OrderedDict([('cpi', 52.9479854557378), ('deg', 46.2276055777492), ('keymap', 1), ('stimNum', 87), ('stimID', 'stim_CR/CR_A_87.png')]), OrderedDict([('cpi', 66.359103185843), ('deg', 35.4372806686602), ('keymap', 1), ('stimNum', 88), ('stimID', 'stim_CR/CR_A_88.png')]), OrderedDict([('cpi', 35.8776566942945), ('deg', 50.0509285772837), ('keymap', 1), ('stimNum', 89), ('stimID', 'stim_CR/CR_A_89.png')]), OrderedDict([('cpi', 64.0889925064627), ('deg', 25.4282684283167), ('keymap', 1), ('stimNum', 90), ('stimID', 'stim_CR/CR_A_90.png')]), OrderedDict([('cpi', 41.1345018273784), ('deg', 61.0810495126105), ('keymap', 1), ('stimNum', 91), ('stimID', 'stim_CR/CR_A_91.png')]), OrderedDict([('cpi', 56.1762981461724), ('deg', 33.9969007013064), ('keymap', 1), ('stimNum', 92), ('stimID', 'stim_CR/CR_A_92.png')]), OrderedDict([('cpi', 56.5564179058558), ('deg', 34.4104673611878), ('keymap', 1), ('stimNum', 93), ('stimID', 'stim_CR/CR_A_93.png')]), OrderedDict([('cpi', 22.378654217663), ('deg', 65.6402738654988), ('keymap', 1), ('stimNum', 94), ('stimID', 'stim_CR/CR_A_94.png')]), OrderedDict([('cpi', 33.3883916608447), ('deg', 40.4957873615459), ('keymap', 1), ('stimNum', 95), ('stimID', 'stim_CR/CR_A_95.png')]), OrderedDict([('cpi', 71.0065439243149), ('deg', 44.4258429427703), ('keymap', 1), ('stimNum', 96), ('stimID', 'stim_CR/CR_A_96.png')]), OrderedDict([('cpi', 18.818872381705), ('deg', 50.7583373207625), ('keymap', 1), ('stimNum', 97), ('stimID', 'stim_CR/CR_A_97.png')]), OrderedDict([('cpi', 37.1832661242828), ('deg', 39.9766288952651), ('keymap', 1), ('stimNum', 98), ('stimID', 'stim_CR/CR_A_98.png')]), OrderedDict([('cpi', 64.8995562106304), ('deg', 53.9837698478991), ('keymap', 1), ('stimNum', 99), ('stimID', 'stim_CR/CR_A_99.png')]), OrderedDict([('cpi', 72.0790504108127), ('deg', 38.1857490772685), ('keymap', 1), ('stimNum', 100), ('stimID', 'stim_CR/CR_A_100.png')]), OrderedDict([('cpi', 25.2213556486608), ('deg', 74.2966866603272), ('keymap', 1), ('stimNum', 101), ('stimID', 'stim_CR/CR_A_101.png')]), OrderedDict([('cpi', 83.038993835661), ('deg', 59.1557251565506), ('keymap', 1), ('stimNum', 102), ('stimID', 'stim_CR/CR_A_102.png')]), OrderedDict([('cpi', 34.4439483579115), ('deg', 48.6910245028869), ('keymap', 1), ('stimNum', 103), ('stimID', 'stim_CR/CR_A_103.png')]), OrderedDict([('cpi', 30.998498133216), ('deg', 15.3640382085875), ('keymap', 1), ('stimNum', 104), ('stimID', 'stim_CR/CR_A_104.png')]), OrderedDict([('cpi', 47.5129706011552), ('deg', 51.4369061670776), ('keymap', 1), ('stimNum', 105), ('stimID', 'stim_CR/CR_A_105.png')]), OrderedDict([('cpi', 77.8019960456008), ('deg', 45.3427349124394), ('keymap', 1), ('stimNum', 106), ('stimID', 'stim_CR/CR_A_106.png')]), OrderedDict([('cpi', 59.5125732602238), ('deg', 84.7910732567461), ('keymap', 1), ('stimNum', 107), ('stimID', 'stim_CR/CR_A_107.png')]), OrderedDict([('cpi', 64.4880414633732), ('deg', 42.1597775717851), ('keymap', 1), ('stimNum', 108), ('stimID', 'stim_CR/CR_A_108.png')]), OrderedDict([('cpi', 79.0946514245538), ('deg', 56.415963226133), ('keymap', 1), ('stimNum', 109), ('stimID', 'stim_CR/CR_A_109.png')]), OrderedDict([('cpi', 69.0885162425016), ('deg', 37.5616692364029), ('keymap', 1), ('stimNum', 110), ('stimID', 'stim_CR/CR_A_110.png')]), OrderedDict([('cpi', 54.4130383222471), ('deg', 69.9428294380047), ('keymap', 1), ('stimNum', 111), ('stimID', 'stim_CR/CR_A_111.png')]), OrderedDict([('cpi', 67.1735888732321), ('deg', 18.8690734176758), ('keymap', 1), ('stimNum', 112), ('stimID', 'stim_CR/CR_A_112.png')]), OrderedDict([('cpi', 52.0913362927592), ('deg', 67.2973350418878), ('keymap', 1), ('stimNum', 113), ('stimID', 'stim_CR/CR_A_113.png')]), OrderedDict([('cpi', 46.915612446904), ('deg', 49.449273818665), ('keymap', 1), ('stimNum', 114), ('stimID', 'stim_CR/CR_A_114.png')]), OrderedDict([('cpi', 59.8485936770201), ('deg', 68.2360871043607), ('keymap', 1), ('stimNum', 115), ('stimID', 'stim_CR/CR_A_115.png')]), OrderedDict([('cpi', 31.2888904916498), ('deg', 77.4385982945252), ('keymap', 1), ('stimNum', 116), ('stimID', 'stim_CR/CR_A_116.png')]), OrderedDict([('cpi', 60.9151842023028), ('deg', 34.8227789240045), ('keymap', 1), ('stimNum', 117), ('stimID', 'stim_CR/CR_A_117.png')]), OrderedDict([('cpi', 45.5413564203258), ('deg', 51.7970428760078), ('keymap', 1), ('stimNum', 118), ('stimID', 'stim_CR/CR_A_118.png')]), OrderedDict([('cpi', 28.3852352743976), ('deg', 36.6151492296561), ('keymap', 1), ('stimNum', 119), ('stimID', 'stim_CR/CR_A_119.png')]), OrderedDict([('cpi', 46.3117555258944), ('deg', 49.7403658451603), ('keymap', 1), ('stimNum', 120), ('stimID', 'stim_CR/CR_A_120.png')]), OrderedDict([('cpi', 45.139755967768), ('deg', 41.5114992875424), ('keymap', 1), ('stimNum', 121), ('stimID', 'stim_CR/CR_A_121.png')]), OrderedDict([('cpi', 57.8786773060465), ('deg', 42.2167685118776), ('keymap', 1), ('stimNum', 122), ('stimID', 'stim_CR/CR_A_122.png')]), OrderedDict([('cpi', 52.7973103705368), ('deg', 25.7676932620943), ('keymap', 1), ('stimNum', 123), ('stimID', 'stim_CR/CR_A_123.png')]), OrderedDict([('cpi', 67.5090059294113), ('deg', 48.5716630602413), ('keymap', 1), ('stimNum', 124), ('stimID', 'stim_CR/CR_A_124.png')]), OrderedDict([('cpi', 48.6766571072497), ('deg', 74.0320557021554), ('keymap', 1), ('stimNum', 125), ('stimID', 'stim_CR/CR_A_125.png')]), OrderedDict([('cpi', 55.9942543750017), ('deg', 35.3708793354508), ('keymap', 1), ('stimNum', 126), ('stimID', 'stim_CR/CR_A_126.png')]), OrderedDict([('cpi', 49.6964700749097), ('deg', 43.2802347005007), ('keymap', 1), ('stimNum', 127), ('stimID', 'stim_CR/CR_A_127.png')]), OrderedDict([('cpi', 52.4628219420212), ('deg', 59.3853354459407), ('keymap', 1), ('stimNum', 128), ('stimID', 'stim_CR/CR_A_128.png')]), OrderedDict([('cpi', 46.287234626578), ('deg', 43.9140742478961), ('keymap', 1), ('stimNum', 129), ('stimID', 'stim_CR/CR_A_129.png')]), OrderedDict([('cpi', 41.8538032474694), ('deg', 62.8027744504856), ('keymap', 1), ('stimNum', 130), ('stimID', 'stim_CR/CR_A_130.png')]), OrderedDict([('cpi', 72.8284224586853), ('deg', 54.8152164284075), ('keymap', 1), ('stimNum', 131), ('stimID', 'stim_CR/CR_A_131.png')]), OrderedDict([('cpi', 54.2599318135929), ('deg', 20.3225882553627), ('keymap', 1), ('stimNum', 132), ('stimID', 'stim_CR/CR_A_132.png')]), OrderedDict([('cpi', 69.8610151228798), ('deg', 34.1593269157169), ('keymap', 1), ('stimNum', 133), ('stimID', 'stim_CR/CR_A_133.png')]), OrderedDict([('cpi', 71.4171686014238), ('deg', 47.1865608756081), ('keymap', 1), ('stimNum', 134), ('stimID', 'stim_CR/CR_A_134.png')]), OrderedDict([('cpi', 44.0221073224874), ('deg', 60.0297672950425), ('keymap', 1), ('stimNum', 135), ('stimID', 'stim_CR/CR_A_135.png')]), OrderedDict([('cpi', 64.4071386593036), ('deg', 61.2678618245804), ('keymap', 1), ('stimNum', 136), ('stimID', 'stim_CR/CR_A_136.png')]), OrderedDict([('cpi', 13.7245284262465), ('deg', 37.5578625428288), ('keymap', 1), ('stimNum', 137), ('stimID', 'stim_CR/CR_A_137.png')]), OrderedDict([('cpi', 45.4590643160671), ('deg', 31.5082373492582), ('keymap', 1), ('stimNum', 138), ('stimID', 'stim_CR/CR_A_138.png')]), OrderedDict([('cpi', 47.5748553178928), ('deg', 51.8089989203533), ('keymap', 1), ('stimNum', 139), ('stimID', 'stim_CR/CR_A_139.png')]), OrderedDict([('cpi', 35.3154217652156), ('deg', 28.4237933078575), ('keymap', 1), ('stimNum', 140), ('stimID', 'stim_CR/CR_A_140.png')]), OrderedDict([('cpi', 65.5328267749833), ('deg', 44.8137580425497), ('keymap', 1), ('stimNum', 141), ('stimID', 'stim_CR/CR_A_141.png')]), OrderedDict([('cpi', 49.9966935885951), ('deg', 67.5947252040878), ('keymap', 1), ('stimNum', 142), ('stimID', 'stim_CR/CR_A_142.png')]), OrderedDict([('cpi', 55.8409397992576), ('deg', 38.377249731378), ('keymap', 1), ('stimNum', 143), ('stimID', 'stim_CR/CR_A_143.png')]), OrderedDict([('cpi', 69.6703787481589), ('deg', 69.0691835868563), ('keymap', 1), ('stimNum', 144), ('stimID', 'stim_CR/CR_A_144.png')]), OrderedDict([('cpi', 35.275564119102), ('deg', 62.642918062299), ('keymap', 1), ('stimNum', 145), ('stimID', 'stim_CR/CR_A_145.png')]), OrderedDict([('cpi', 68.3352473598642), ('deg', 54.1667760431471), ('keymap', 1), ('stimNum', 146), ('stimID', 'stim_CR/CR_A_146.png')]), OrderedDict([('cpi', 53.6473403965722), ('deg', 39.6694221659412), ('keymap', 1), ('stimNum', 147), ('stimID', 'stim_CR/CR_A_147.png')]), OrderedDict([('cpi', 46.2445987990475), ('deg', 42.0447527725081), ('keymap', 1), ('stimNum', 148), ('stimID', 'stim_CR/CR_A_148.png')]), OrderedDict([('cpi', 30.120521037221), ('deg', 70.2726481703511), ('keymap', 1), ('stimNum', 149), ('stimID', 'stim_CR/CR_A_149.png')]), OrderedDict([('cpi', 70.2710744335616), ('deg', 37.1206243473448), ('keymap', 1), ('stimNum', 150), ('stimID', 'stim_CR/CR_A_150.png')]), OrderedDict([('cpi', -65.0363883218308), ('deg', 82.3118809822496), ('keymap', 0), ('stimNum', 1), ('stimID', 'stim_CR/CR_B_1.png')]), OrderedDict([('cpi', -37.6574648774271), ('deg', 41.0650814683264), ('keymap', 0), ('stimNum', 2), ('stimID', 'stim_CR/CR_B_2.png')]), OrderedDict([('cpi', -48.5221254519001), ('deg', 39.025672352), ('keymap', 0), ('stimNum', 3), ('stimID', 'stim_CR/CR_B_3.png')]), OrderedDict([('cpi', -78.3968505862309), ('deg', 49.7994534736642), ('keymap', 0), ('stimNum', 4), ('stimID', 'stim_CR/CR_B_4.png')]), OrderedDict([('cpi', -50.7854928725199), ('deg', 36.9756474054897), ('keymap', 0), ('stimNum', 5), ('stimID', 'stim_CR/CR_B_5.png')]), OrderedDict([('cpi', -34.6089932446744), ('deg', 88.7253579337377), ('keymap', 0), ('stimNum', 6), ('stimID', 'stim_CR/CR_B_6.png')]), OrderedDict([('cpi', -85.1436308220673), ('deg', 51.6078340401737), ('keymap', 0), ('stimNum', 7), ('stimID', 'stim_CR/CR_B_7.png')]), OrderedDict([('cpi', -88.0974851917808), ('deg', 48.0417057023316), ('keymap', 0), ('stimNum', 8), ('stimID', 'stim_CR/CR_B_8.png')]), OrderedDict([('cpi', -56.2925924696631), ('deg', 65.5443378147041), ('keymap', 0), ('stimNum', 9), ('stimID', 'stim_CR/CR_B_9.png')]), OrderedDict([('cpi', -34.0674381177664), ('deg', 38.9182717693604), ('keymap', 0), ('stimNum', 10), ('stimID', 'stim_CR/CR_B_10.png')]), OrderedDict([('cpi', -64.7552288338123), ('deg', 40.2019647135799), ('keymap', 0), ('stimNum', 11), ('stimID', 'stim_CR/CR_B_11.png')]), OrderedDict([('cpi', -43.2744687580603), ('deg', 37.524483671261), ('keymap', 0), ('stimNum', 12), ('stimID', 'stim_CR/CR_B_12.png')]), OrderedDict([('cpi', -27.1681351699521), ('deg', 49.4777158025502), ('keymap', 0), ('stimNum', 13), ('stimID', 'stim_CR/CR_B_13.png')]), OrderedDict([('cpi', -57.8497908837741), ('deg', 53.7151018892029), ('keymap', 0), ('stimNum', 14), ('stimID', 'stim_CR/CR_B_14.png')]), OrderedDict([('cpi', -58.4120960089164), ('deg', 31.8755036141222), ('keymap', 0), ('stimNum', 15), ('stimID', 'stim_CR/CR_B_15.png')]), OrderedDict([('cpi', -39.3841280704485), ('deg', 77.174422564334), ('keymap', 0), ('stimNum', 16), ('stimID', 'stim_CR/CR_B_16.png')]), OrderedDict([('cpi', -47.4423585497331), ('deg', 33.5920750463575), ('keymap', 0), ('stimNum', 17), ('stimID', 'stim_CR/CR_B_17.png')]), OrderedDict([('cpi', -30.6546904828078), ('deg', 42.5112504507788), ('keymap', 0), ('stimNum', 18), ('stimID', 'stim_CR/CR_B_18.png')]), OrderedDict([('cpi', -30.7670270120345), ('deg', 62.9040672928461), ('keymap', 0), ('stimNum', 19), ('stimID', 'stim_CR/CR_B_19.png')]), OrderedDict([('cpi', -75.6373467717099), ('deg', 21.4519277806112), ('keymap', 0), ('stimNum', 20), ('stimID', 'stim_CR/CR_B_20.png')]), OrderedDict([('cpi', -59.2105822906867), ('deg', 32.4530089099107), ('keymap', 0), ('stimNum', 21), ('stimID', 'stim_CR/CR_B_21.png')]), OrderedDict([('cpi', -52.4011324756103), ('deg', 53.3711656681721), ('keymap', 0), ('stimNum', 22), ('stimID', 'stim_CR/CR_B_22.png')]), OrderedDict([('cpi', -63.8274436098473), ('deg', 28.953381792923), ('keymap', 0), ('stimNum', 23), ('stimID', 'stim_CR/CR_B_23.png')]), OrderedDict([('cpi', -44.1916119914087), ('deg', 37.6823229284563), ('keymap', 0), ('stimNum', 24), ('stimID', 'stim_CR/CR_B_24.png')]), OrderedDict([('cpi', -19.2526241800789), ('deg', 42.3099905374236), ('keymap', 0), ('stimNum', 25), ('stimID', 'stim_CR/CR_B_25.png')]), OrderedDict([('cpi', -30.1338248875584), ('deg', 49.5742388680463), ('keymap', 0), ('stimNum', 26), ('stimID', 'stim_CR/CR_B_26.png')]), OrderedDict([('cpi', -73.9509132733207), ('deg', 33.1724892623806), ('keymap', 0), ('stimNum', 27), ('stimID', 'stim_CR/CR_B_27.png')]), OrderedDict([('cpi', -54.6063602175659), ('deg', 34.0496552493358), ('keymap', 0), ('stimNum', 28), ('stimID', 'stim_CR/CR_B_28.png')]), OrderedDict([('cpi', -40.2905789479005), ('deg', 51.5216589217371), ('keymap', 0), ('stimNum', 29), ('stimID', 'stim_CR/CR_B_29.png')]), OrderedDict([('cpi', -57.5370100160277), ('deg', 21.9014322159259), ('keymap', 0), ('stimNum', 30), ('stimID', 'stim_CR/CR_B_30.png')]), OrderedDict([('cpi', -68.9747196199752), ('deg', 47.2815970926449), ('keymap', 0), ('stimNum', 31), ('stimID', 'stim_CR/CR_B_31.png')]), OrderedDict([('cpi', -58.6304012082429), ('deg', 42.2434667684791), ('keymap', 0), ('stimNum', 32), ('stimID', 'stim_CR/CR_B_32.png')]), OrderedDict([('cpi', -54.7676627607359), ('deg', 54.1206103472629), ('keymap', 0), ('stimNum', 33), ('stimID', 'stim_CR/CR_B_33.png')]), OrderedDict([('cpi', -65.2296477434863), ('deg', 37.2362859620983), ('keymap', 0), ('stimNum', 34), ('stimID', 'stim_CR/CR_B_34.png')]), OrderedDict([('cpi', -59.7783060291745), ('deg', 46.779291841004), ('keymap', 0), ('stimNum', 35), ('stimID', 'stim_CR/CR_B_35.png')]), OrderedDict([('cpi', -49.2890902147673), ('deg', 76.4422526564066), ('keymap', 0), ('stimNum', 36), ('stimID', 'stim_CR/CR_B_36.png')]), OrderedDict([('cpi', -52.5998401091747), ('deg', 46.0895998265776), ('keymap', 0), ('stimNum', 37), ('stimID', 'stim_CR/CR_B_37.png')]), OrderedDict([('cpi', -32.1959221948504), ('deg', 52.7174077908945), ('keymap', 0), ('stimNum', 38), ('stimID', 'stim_CR/CR_B_38.png')]), OrderedDict([('cpi', -39.894410380737), ('deg', 75.5217664589195), ('keymap', 0), ('stimNum', 39), ('stimID', 'stim_CR/CR_B_39.png')]), OrderedDict([('cpi', -47.2531903834977), ('deg', 45.5550284308811), ('keymap', 0), ('stimNum', 40), ('stimID', 'stim_CR/CR_B_40.png')]), OrderedDict([('cpi', -18.4660674535209), ('deg', 69.9826394035576), ('keymap', 0), ('stimNum', 41), ('stimID', 'stim_CR/CR_B_41.png')]), OrderedDict([('cpi', -45.6531499307085), ('deg', 60.1508486538332), ('keymap', 0), ('stimNum', 42), ('stimID', 'stim_CR/CR_B_42.png')]), OrderedDict([('cpi', -38.3827385540651), ('deg', 39.5354014947758), ('keymap', 0), ('stimNum', 43), ('stimID', 'stim_CR/CR_B_43.png')]), OrderedDict([('cpi', -45.1156705632827), ('deg', 56.5221221216479), ('keymap', 0), ('stimNum', 44), ('stimID', 'stim_CR/CR_B_44.png')]), OrderedDict([('cpi', -66.2224246636918), ('deg', 32.434320207957), ('keymap', 0), ('stimNum', 45), ('stimID', 'stim_CR/CR_B_45.png')]), OrderedDict([('cpi', -62.2426983788276), ('deg', 57.7234295405528), ('keymap', 0), ('stimNum', 46), ('stimID', 'stim_CR/CR_B_46.png')]), OrderedDict([('cpi', -30.645306837035), ('deg', 27.8931967702332), ('keymap', 0), ('stimNum', 47), ('stimID', 'stim_CR/CR_B_47.png')]), OrderedDict([('cpi', -31.2642790249342), ('deg', 70.6114162850727), ('keymap', 0), ('stimNum', 48), ('stimID', 'stim_CR/CR_B_48.png')]), OrderedDict([('cpi', -42.8063741375368), ('deg', 45.3770924404332), ('keymap', 0), ('stimNum', 49), ('stimID', 'stim_CR/CR_B_49.png')]), OrderedDict([('cpi', -54.4352830153273), ('deg', 43.0025105432106), ('keymap', 0), ('stimNum', 50), ('stimID', 'stim_CR/CR_B_50.png')]), OrderedDict([('cpi', -53.3510389451876), ('deg', -62.0982981388479), ('keymap', 0), ('stimNum', 51), ('stimID', 'stim_CR/CR_B_51.png')]), OrderedDict([('cpi', -49.9702255632954), ('deg', -29.2885739057262), ('keymap', 0), ('stimNum', 52), ('stimID', 'stim_CR/CR_B_52.png')]), OrderedDict([('cpi', -72.6062682304754), ('deg', -34.4239809203911), ('keymap', 0), ('stimNum', 53), ('stimID', 'stim_CR/CR_B_53.png')]), OrderedDict([('cpi', -71.8807164304096), ('deg', -56.5515593454543), ('keymap', 0), ('stimNum', 54), ('stimID', 'stim_CR/CR_B_54.png')]), OrderedDict([('cpi', -66.3075184380139), ('deg', -33.3178845105711), ('keymap', 0), ('stimNum', 55), ('stimID', 'stim_CR/CR_B_55.png')]), OrderedDict([('cpi', -50.4193058305074), ('deg', -23.3127019446237), ('keymap', 0), ('stimNum', 56), ('stimID', 'stim_CR/CR_B_56.png')]), OrderedDict([('cpi', -36.6359803130228), ('deg', -55.435027298097), ('keymap', 0), ('stimNum', 57), ('stimID', 'stim_CR/CR_B_57.png')]), OrderedDict([('cpi', -27.9797693201438), ('deg', -60.7531793395018), ('keymap', 0), ('stimNum', 58), ('stimID', 'stim_CR/CR_B_58.png')]), OrderedDict([('cpi', -31.6511432343829), ('deg', -72.7146552551132), ('keymap', 0), ('stimNum', 59), ('stimID', 'stim_CR/CR_B_59.png')]), OrderedDict([('cpi', -38.0396292961116), ('deg', -63.7894785792206), ('keymap', 0), ('stimNum', 60), ('stimID', 'stim_CR/CR_B_60.png')]), OrderedDict([('cpi', -34.0312640600103), ('deg', -24.1597417763529), ('keymap', 0), ('stimNum', 61), ('stimID', 'stim_CR/CR_B_61.png')]), OrderedDict([('cpi', -81.5494973796928), ('deg', -73.3417029153113), ('keymap', 0), ('stimNum', 62), ('stimID', 'stim_CR/CR_B_62.png')]), OrderedDict([('cpi', -46.9324511305401), ('deg', -26.6489706758595), ('keymap', 0), ('stimNum', 63), ('stimID', 'stim_CR/CR_B_63.png')]), OrderedDict([('cpi', -73.3427224619658), ('deg', -70.5914515641557), ('keymap', 0), ('stimNum', 64), ('stimID', 'stim_CR/CR_B_64.png')]), OrderedDict([('cpi', -43.1572171282134), ('deg', -49.3960273218867), ('keymap', 0), ('stimNum', 65), ('stimID', 'stim_CR/CR_B_65.png')]), OrderedDict([('cpi', -41.3932626690136), ('deg', -49.1168924471541), ('keymap', 0), ('stimNum', 66), ('stimID', 'stim_CR/CR_B_66.png')]), OrderedDict([('cpi', -21.3295993497819), ('deg', -70.529298075128), ('keymap', 0), ('stimNum', 67), ('stimID', 'stim_CR/CR_B_67.png')]), OrderedDict([('cpi', -39.7467437208415), ('deg', -87.1945385883205), ('keymap', 0), ('stimNum', 68), ('stimID', 'stim_CR/CR_B_68.png')]), OrderedDict([('cpi', -55.7354501451091), ('deg', -31.1589069060149), ('keymap', 0), ('stimNum', 69), ('stimID', 'stim_CR/CR_B_69.png')]), OrderedDict([('cpi', -45.3924284995365), ('deg', -63.7262730858998), ('keymap', 0), ('stimNum', 70), ('stimID', 'stim_CR/CR_B_70.png')]), OrderedDict([('cpi', -78.7224805152417), ('deg', -76.9470812442731), ('keymap', 0), ('stimNum', 71), ('stimID', 'stim_CR/CR_B_71.png')]), OrderedDict([('cpi', -55.7779472359924), ('deg', -80.1229993645597), ('keymap', 0), ('stimNum', 72), ('stimID', 'stim_CR/CR_B_72.png')]), OrderedDict([('cpi', -35.9283772660782), ('deg', -58.6685424030923), ('keymap', 0), ('stimNum', 73), ('stimID', 'stim_CR/CR_B_73.png')]), OrderedDict([('cpi', -63.6764612924517), ('deg', -29.459643070845), ('keymap', 0), ('stimNum', 74), ('stimID', 'stim_CR/CR_B_74.png')]), OrderedDict([('cpi', -52.0411756438864), ('deg', -54.3838450121915), ('keymap', 0), ('stimNum', 75), ('stimID', 'stim_CR/CR_B_75.png')]), OrderedDict([('cpi', -52.5258264999922), ('deg', -58.9417445274083), ('keymap', 0), ('stimNum', 76), ('stimID', 'stim_CR/CR_B_76.png')]), OrderedDict([('cpi', -24.9337414211829), ('deg', -47.6993060130166), ('keymap', 0), ('stimNum', 77), ('stimID', 'stim_CR/CR_B_77.png')]), OrderedDict([('cpi', -50.5230301693515), ('deg', -51.9111495910172), ('keymap', 0), ('stimNum', 78), ('stimID', 'stim_CR/CR_B_78.png')]), OrderedDict([('cpi', -47.6183270418248), ('deg', -74.950291463558), ('keymap', 0), ('stimNum', 79), ('stimID', 'stim_CR/CR_B_79.png')]), OrderedDict([('cpi', -54.1816769097572), ('deg', -15.1853158007544), ('keymap', 0), ('stimNum', 80), ('stimID', 'stim_CR/CR_B_80.png')]), OrderedDict([('cpi', -78.4692497464398), ('deg', -43.1821236126144), ('keymap', 0), ('stimNum', 81), ('stimID', 'stim_CR/CR_B_81.png')]), OrderedDict([('cpi', -52.1650797054153), ('deg', -40.8431904515571), ('keymap', 0), ('stimNum', 82), ('stimID', 'stim_CR/CR_B_82.png')]), OrderedDict([('cpi', -63.6987941039739), ('deg', -55.2267840575613), ('keymap', 0), ('stimNum', 83), ('stimID', 'stim_CR/CR_B_83.png')]), OrderedDict([('cpi', -41.1827713307496), ('deg', -68.7393736129382), ('keymap', 0), ('stimNum', 84), ('stimID', 'stim_CR/CR_B_84.png')]), OrderedDict([('cpi', -38.4672373314548), ('deg', -46.2942311436414), ('keymap', 0), ('stimNum', 85), ('stimID', 'stim_CR/CR_B_85.png')]), OrderedDict([('cpi', -8.05316898299712), ('deg', -56.0194372502919), ('keymap', 0), ('stimNum', 86), ('stimID', 'stim_CR/CR_B_86.png')]), OrderedDict([('cpi', -34.6408259453437), ('deg', -50.1645302356922), ('keymap', 0), ('stimNum', 87), ('stimID', 'stim_CR/CR_B_87.png')]), OrderedDict([('cpi', -57.9579352606209), ('deg', -39.6828323271936), ('keymap', 0), ('stimNum', 88), ('stimID', 'stim_CR/CR_B_88.png')]), OrderedDict([('cpi', -61.8152185307336), ('deg', -37.8656274857602), ('keymap', 0), ('stimNum', 89), ('stimID', 'stim_CR/CR_B_89.png')]), OrderedDict([('cpi', -51.0346002386572), ('deg', -63.2323946339165), ('keymap', 0), ('stimNum', 90), ('stimID', 'stim_CR/CR_B_90.png')]), OrderedDict([('cpi', -43.1149348010452), ('deg', -78.920033250887), ('keymap', 0), ('stimNum', 91), ('stimID', 'stim_CR/CR_B_91.png')]), OrderedDict([('cpi', -52.243870488049), ('deg', -35.3944427662021), ('keymap', 0), ('stimNum', 92), ('stimID', 'stim_CR/CR_B_92.png')]), OrderedDict([('cpi', -73.6076750026092), ('deg', -33.4912079793216), ('keymap', 0), ('stimNum', 93), ('stimID', 'stim_CR/CR_B_93.png')]), OrderedDict([('cpi', -38.5683368923861), ('deg', -38.7159973515344), ('keymap', 0), ('stimNum', 94), ('stimID', 'stim_CR/CR_B_94.png')]), OrderedDict([('cpi', -64.1387637830866), ('deg', -64.6304751523762), ('keymap', 0), ('stimNum', 95), ('stimID', 'stim_CR/CR_B_95.png')]), OrderedDict([('cpi', -46.5742719093098), ('deg', -43.2507639808615), ('keymap', 0), ('stimNum', 96), ('stimID', 'stim_CR/CR_B_96.png')]), OrderedDict([('cpi', -52.0005060637082), ('deg', -36.5581061481564), ('keymap', 0), ('stimNum', 97), ('stimID', 'stim_CR/CR_B_97.png')]), OrderedDict([('cpi', -60.0070655221055), ('deg', -12.7983146403872), ('keymap', 0), ('stimNum', 98), ('stimID', 'stim_CR/CR_B_98.png')]), OrderedDict([('cpi', -38.8822681853422), ('deg', -68.905309747494), ('keymap', 0), ('stimNum', 99), ('stimID', 'stim_CR/CR_B_99.png')]), OrderedDict([('cpi', -36.4427513397535), ('deg', -35.9312101635732), ('keymap', 0), ('stimNum', 100), ('stimID', 'stim_CR/CR_B_100.png')]), OrderedDict([('cpi', 52.9191908557486), ('deg', -46.936865730932), ('keymap', 0), ('stimNum', 101), ('stimID', 'stim_CR/CR_B_101.png')]), OrderedDict([('cpi', 43.6071647806495), ('deg', -72.68975707922), ('keymap', 0), ('stimNum', 102), ('stimID', 'stim_CR/CR_B_102.png')]), OrderedDict([('cpi', 48.969500915501), ('deg', -26.3450809027049), ('keymap', 0), ('stimNum', 103), ('stimID', 'stim_CR/CR_B_103.png')]), OrderedDict([('cpi', 49.0290880109167), ('deg', -37.7872717626417), ('keymap', 0), ('stimNum', 104), ('stimID', 'stim_CR/CR_B_104.png')]), OrderedDict([('cpi', 10.7724061928371), ('deg', -70.6113752338299), ('keymap', 0), ('stimNum', 105), ('stimID', 'stim_CR/CR_B_105.png')]), OrderedDict([('cpi', 56.2328570025418), ('deg', -41.3898792034523), ('keymap', 0), ('stimNum', 106), ('stimID', 'stim_CR/CR_B_106.png')]), OrderedDict([('cpi', 30.324413093475), ('deg', -42.2439594101954), ('keymap', 0), ('stimNum', 107), ('stimID', 'stim_CR/CR_B_107.png')]), OrderedDict([('cpi', 36.3959517831151), ('deg', -69.773761678935), ('keymap', 0), ('stimNum', 108), ('stimID', 'stim_CR/CR_B_108.png')]), OrderedDict([('cpi', 64.0153216593383), ('deg', -44.3576568296442), ('keymap', 0), ('stimNum', 109), ('stimID', 'stim_CR/CR_B_109.png')]), OrderedDict([('cpi', 34.5702074803448), ('deg', -32.924125968834), ('keymap', 0), ('stimNum', 110), ('stimID', 'stim_CR/CR_B_110.png')]), OrderedDict([('cpi', 77.5457416513336), ('deg', -30.1744554466583), ('keymap', 0), ('stimNum', 111), ('stimID', 'stim_CR/CR_B_111.png')]), OrderedDict([('cpi', 54.33443845104), ('deg', -60.3185282337646), ('keymap', 0), ('stimNum', 112), ('stimID', 'stim_CR/CR_B_112.png')]), OrderedDict([('cpi', 52.7643062667983), ('deg', -69.6792157488435), ('keymap', 0), ('stimNum', 113), ('stimID', 'stim_CR/CR_B_113.png')]), OrderedDict([('cpi', 64.3905489078739), ('deg', -56.0159384918775), ('keymap', 0), ('stimNum', 114), ('stimID', 'stim_CR/CR_B_114.png')]), OrderedDict([('cpi', 33.5632084238348), ('deg', -50.5237095401282), ('keymap', 0), ('stimNum', 115), ('stimID', 'stim_CR/CR_B_115.png')]), OrderedDict([('cpi', 57.3371805798868), ('deg', -87.5000444449728), ('keymap', 0), ('stimNum', 116), ('stimID', 'stim_CR/CR_B_116.png')]), OrderedDict([('cpi', 33.5905914781457), ('deg', -51.2039216311638), ('keymap', 0), ('stimNum', 117), ('stimID', 'stim_CR/CR_B_117.png')]), OrderedDict([('cpi', 67.2604966816106), ('deg', -49.5442961668645), ('keymap', 0), ('stimNum', 118), ('stimID', 'stim_CR/CR_B_118.png')]), OrderedDict([('cpi', 70.1179996828352), ('deg', -52.4568370054186), ('keymap', 0), ('stimNum', 119), ('stimID', 'stim_CR/CR_B_119.png')]), OrderedDict([('cpi', 52.0310171830081), ('deg', -60.6609741449218), ('keymap', 0), ('stimNum', 120), ('stimID', 'stim_CR/CR_B_120.png')]), OrderedDict([('cpi', 49.2686618725289), ('deg', -61.7732104620355), ('keymap', 0), ('stimNum', 121), ('stimID', 'stim_CR/CR_B_121.png')]), OrderedDict([('cpi', 52.9459680500859), ('deg', -55.3539504675723), ('keymap', 0), ('stimNum', 122), ('stimID', 'stim_CR/CR_B_122.png')]), OrderedDict([('cpi', 40.6404933959545), ('deg', -80.9733863490256), ('keymap', 0), ('stimNum', 123), ('stimID', 'stim_CR/CR_B_123.png')]), OrderedDict([('cpi', 53.3198969244442), ('deg', -83.3777503284543), ('keymap', 0), ('stimNum', 124), ('stimID', 'stim_CR/CR_B_124.png')]), OrderedDict([('cpi', 33.2938827179265), ('deg', -55.8050441560065), ('keymap', 0), ('stimNum', 125), ('stimID', 'stim_CR/CR_B_125.png')]), OrderedDict([('cpi', 61.4595269885193), ('deg', -43.5322460081063), ('keymap', 0), ('stimNum', 126), ('stimID', 'stim_CR/CR_B_126.png')]), OrderedDict([('cpi', 45.9901987374477), ('deg', -51.5424158869413), ('keymap', 0), ('stimNum', 127), ('stimID', 'stim_CR/CR_B_127.png')]), OrderedDict([('cpi', 25.3487915131383), ('deg', -68.4447000772886), ('keymap', 0), ('stimNum', 128), ('stimID', 'stim_CR/CR_B_128.png')]), OrderedDict([('cpi', 67.2392123796793), ('deg', -49.3597740621616), ('keymap', 0), ('stimNum', 129), ('stimID', 'stim_CR/CR_B_129.png')]), OrderedDict([('cpi', 69.7329254399393), ('deg', -67.224808479072), ('keymap', 0), ('stimNum', 130), ('stimID', 'stim_CR/CR_B_130.png')]), OrderedDict([('cpi', 31.4356992277353), ('deg', -62.2606595200923), ('keymap', 0), ('stimNum', 131), ('stimID', 'stim_CR/CR_B_131.png')]), OrderedDict([('cpi', 61.9470523212698), ('deg', -57.4499431373936), ('keymap', 0), ('stimNum', 132), ('stimID', 'stim_CR/CR_B_132.png')]), OrderedDict([('cpi', 35.0789383384885), ('deg', -55.0019777969301), ('keymap', 0), ('stimNum', 133), ('stimID', 'stim_CR/CR_B_133.png')]), OrderedDict([('cpi', 48.3434817241818), ('deg', -57.5780422814132), ('keymap', 0), ('stimNum', 134), ('stimID', 'stim_CR/CR_B_134.png')]), OrderedDict([('cpi', 33.0260563826655), ('deg', -47.891506121119), ('keymap', 0), ('stimNum', 135), ('stimID', 'stim_CR/CR_B_135.png')]), OrderedDict([('cpi', 27.7812141410285), ('deg', -46.5897836626668), ('keymap', 0), ('stimNum', 136), ('stimID', 'stim_CR/CR_B_136.png')]), OrderedDict([('cpi', 9.71493551204374), ('deg', -67.3679400722541), ('keymap', 0), ('stimNum', 137), ('stimID', 'stim_CR/CR_B_137.png')]), OrderedDict([('cpi', 58.3187160539658), ('deg', -60.130730153877), ('keymap', 0), ('stimNum', 138), ('stimID', 'stim_CR/CR_B_138.png')]), OrderedDict([('cpi', 23.0909931534975), ('deg', -60.3117652623962), ('keymap', 0), ('stimNum', 139), ('stimID', 'stim_CR/CR_B_139.png')]), OrderedDict([('cpi', 45.1947676896457), ('deg', -25.0293548159515), ('keymap', 0), ('stimNum', 140), ('stimID', 'stim_CR/CR_B_140.png')]), OrderedDict([('cpi', 53.6092688229018), ('deg', -58.9450954769179), ('keymap', 0), ('stimNum', 141), ('stimID', 'stim_CR/CR_B_141.png')]), OrderedDict([('cpi', 21.8619007726415), ('deg', -41.9043288598144), ('keymap', 0), ('stimNum', 142), ('stimID', 'stim_CR/CR_B_142.png')]), OrderedDict([('cpi', 38.5444009640193), ('deg', -44.7835822972557), ('keymap', 0), ('stimNum', 143), ('stimID', 'stim_CR/CR_B_143.png')]), OrderedDict([('cpi', 33.3845958854886), ('deg', -64.211801076393), ('keymap', 0), ('stimNum', 144), ('stimID', 'stim_CR/CR_B_144.png')]), OrderedDict([('cpi', 45.1958501738401), ('deg', -56.1246671256351), ('keymap', 0), ('stimNum', 145), ('stimID', 'stim_CR/CR_B_145.png')]), OrderedDict([('cpi', 38.5243332696622), ('deg', -68.2959443283235), ('keymap', 0), ('stimNum', 146), ('stimID', 'stim_CR/CR_B_146.png')]), OrderedDict([('cpi', 78.0258606904468), ('deg', -75.1593370598277), ('keymap', 0), ('stimNum', 147), ('stimID', 'stim_CR/CR_B_147.png')]), OrderedDict([('cpi', 54.6574624998125), ('deg', -71.9056083924654), ('keymap', 0), ('stimNum', 148), ('stimID', 'stim_CR/CR_B_148.png')]), OrderedDict([('cpi', 38.2422350584893), ('deg', -31.7281325865769), ('keymap', 0), ('stimNum', 149), ('stimID', 'stim_CR/CR_B_149.png')]), OrderedDict([('cpi', 63.8604652951887), ('deg', -37.8074137623967), ('keymap', 0), ('stimNum', 150), ('stimID', 'stim_CR/CR_B_150.png')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="CR_coord_arbitrary.csv" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="num"/>
      <Param name="name" updates="None" val="gaborLoop" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="gaborTrial"/>
    <Routine name="gaborFb"/>
    <LoopTerminator name="gaborLoop"/>
    <Routine name="rest1"/>
    <LoopInitiator loopType="TrialHandler" name="ctrlLoop">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('ctrlID', 'stim_ctrl/incongruent_1.png'), ('ans', 0)]), OrderedDict([('ctrlID', 'stim_ctrl/incongruent_2.png'), ('ans', 0)]), OrderedDict([('ctrlID', 'stim_ctrl/incongruent_3.png'), ('ans', 0)]), OrderedDict([('ctrlID', 'stim_ctrl/incongruent_4.png'), ('ans', 0)]), OrderedDict([('ctrlID', 'stim_ctrl/incongruent_5.png'), ('ans', 0)]), OrderedDict([('ctrlID', 'stim_ctrl/incongruent_6.png'), ('ans', 0)]), OrderedDict([('ctrlID', 'stim_ctrl/incongruent_7.png'), ('ans', 0)]), OrderedDict([('ctrlID', 'stim_ctrl/incongruent_8.png'), ('ans', 0)]), OrderedDict([('ctrlID', 'stim_ctrl/incongruent_9.png'), ('ans', 0)]), OrderedDict([('ctrlID', 'stim_ctrl/incongruent_10.png'), ('ans', 0)]), OrderedDict([('ctrlID', 'stim_ctrl/incongruent_11.png'), ('ans', 0)]), OrderedDict([('ctrlID', 'stim_ctrl/incongruent_12.png'), ('ans', 0)]), OrderedDict([('ctrlID', 'stim_ctrl/incongruent_13.png'), ('ans', 0)]), OrderedDict([('ctrlID', 'stim_ctrl/incongruent_14.png'), ('ans', 0)]), OrderedDict([('ctrlID', 'stim_ctrl/incongruent_15.png'), ('ans', 0)]), OrderedDict([('ctrlID', 'stim_ctrl/incongruent_16.png'), ('ans', 0)]), OrderedDict([('ctrlID', 'stim_ctrl/incongruent_17.png'), ('ans', 0)]), OrderedDict([('ctrlID', 'stim_ctrl/incongruent_18.png'), ('ans', 0)]), OrderedDict([('ctrlID', 'stim_ctrl/incongruent_19.png'), ('ans', 0)]), OrderedDict([('ctrlID', 'stim_ctrl/incongruent_20.png'), ('ans', 0)]), OrderedDict([('ctrlID', 'stim_ctrl/incongruent_21.png'), ('ans', 0)]), OrderedDict([('ctrlID', 'stim_ctrl/incongruent_22.png'), ('ans', 0)]), OrderedDict([('ctrlID', 'stim_ctrl/incongruent_23.png'), ('ans', 0)]), OrderedDict([('ctrlID', 'stim_ctrl/incongruent_24.png'), ('ans', 0)]), OrderedDict([('ctrlID', 'stim_ctrl/incongruent_25.png'), ('ans', 0)]), OrderedDict([('ctrlID', 'stim_ctrl/incongruent_26.png'), ('ans', 0)]), OrderedDict([('ctrlID', 'stim_ctrl/incongruent_27.png'), ('ans', 0)]), OrderedDict([('ctrlID', 'stim_ctrl/incongruent_28.png'), ('ans', 0)]), OrderedDict([('ctrlID', 'stim_ctrl/incongruent_29.png'), ('ans', 0)]), OrderedDict([('ctrlID', 'stim_ctrl/incongruent_30.png'), ('ans', 0)]), OrderedDict([('ctrlID', 'stim_ctrl/incongruent_31.png'), ('ans', 0)]), OrderedDict([('ctrlID', 'stim_ctrl/incongruent_32.png'), ('ans', 0)]), OrderedDict([('ctrlID', 'stim_ctrl/incongruent_33.png'), ('ans', 0)]), OrderedDict([('ctrlID', 'stim_ctrl/incongruent_34.png'), ('ans', 0)]), OrderedDict([('ctrlID', 'stim_ctrl/incongruent_35.png'), ('ans', 0)]), OrderedDict([('ctrlID', 'stim_ctrl/incongruent_36.png'), ('ans', 0)]), OrderedDict([('ctrlID', 'stim_ctrl/incongruent_37.png'), ('ans', 0)]), OrderedDict([('ctrlID', 'stim_ctrl/incongruent_38.png'), ('ans', 0)]), OrderedDict([('ctrlID', 'stim_ctrl/incongruent_39.png'), ('ans', 0)]), OrderedDict([('ctrlID', 'stim_ctrl/incongruent_40.png'), ('ans', 0)]), OrderedDict([('ctrlID', 'stim_ctrl/incongruent_41.png'), ('ans', 0)]), OrderedDict([('ctrlID', 'stim_ctrl/incongruent_42.png'), ('ans', 0)]), OrderedDict([('ctrlID', 'stim_ctrl/incongruent_43.png'), ('ans', 0)]), OrderedDict([('ctrlID', 'stim_ctrl/incongruent_44.png'), ('ans', 0)]), OrderedDict([('ctrlID', 'stim_ctrl/incongruent_45.png'), ('ans', 0)]), OrderedDict([('ctrlID', 'stim_ctrl/incongruent_46.png'), ('ans', 0)]), OrderedDict([('ctrlID', 'stim_ctrl/incongruent_47.png'), ('ans', 0)]), OrderedDict([('ctrlID', 'stim_ctrl/incongruent_48.png'), ('ans', 0)]), OrderedDict([('ctrlID', 'stim_ctrl/incongruent_49.png'), ('ans', 0)]), OrderedDict([('ctrlID', 'stim_ctrl/incongruent_50.png'), ('ans', 0)]), OrderedDict([('ctrlID', 'stim_ctrl/incongruent_51.png'), ('ans', 0)]), OrderedDict([('ctrlID', 'stim_ctrl/incongruent_52.png'), ('ans', 0)]), OrderedDict([('ctrlID', 'stim_ctrl/incongruent_53.png'), ('ans', 0)]), OrderedDict([('ctrlID', 'stim_ctrl/incongruent_54.png'), ('ans', 0)]), OrderedDict([('ctrlID', 'stim_ctrl/incongruent_55.png'), ('ans', 0)]), OrderedDict([('ctrlID', 'stim_ctrl/incongruent_56.png'), ('ans', 0)]), OrderedDict([('ctrlID', 'stim_ctrl/incongruent_57.png'), ('ans', 0)]), OrderedDict([('ctrlID', 'stim_ctrl/incongruent_58.png'), ('ans', 0)]), OrderedDict([('ctrlID', 'stim_ctrl/incongruent_59.png'), ('ans', 0)]), OrderedDict([('ctrlID', 'stim_ctrl/incongruent_60.png'), ('ans', 0)]), OrderedDict([('ctrlID', 'stim_ctrl/congruent_1.png'), ('ans', 1)]), OrderedDict([('ctrlID', 'stim_ctrl/congruent_2.png'), ('ans', 1)]), OrderedDict([('ctrlID', 'stim_ctrl/congruent_3.png'), ('ans', 1)]), OrderedDict([('ctrlID', 'stim_ctrl/congruent_4.png'), ('ans', 1)]), OrderedDict([('ctrlID', 'stim_ctrl/congruent_5.png'), ('ans', 1)]), OrderedDict([('ctrlID', 'stim_ctrl/congruent_6.png'), ('ans', 1)]), OrderedDict([('ctrlID', 'stim_ctrl/congruent_7.png'), ('ans', 1)]), OrderedDict([('ctrlID', 'stim_ctrl/congruent_8.png'), ('ans', 1)]), OrderedDict([('ctrlID', 'stim_ctrl/congruent_9.png'), ('ans', 1)]), OrderedDict([('ctrlID', 'stim_ctrl/congruent_10.png'), ('ans', 1)]), OrderedDict([('ctrlID', 'stim_ctrl/congruent_11.png'), ('ans', 1)]), OrderedDict([('ctrlID', 'stim_ctrl/congruent_12.png'), ('ans', 1)]), OrderedDict([('ctrlID', 'stim_ctrl/congruent_13.png'), ('ans', 1)]), OrderedDict([('ctrlID', 'stim_ctrl/congruent_14.png'), ('ans', 1)]), OrderedDict([('ctrlID', 'stim_ctrl/congruent_15.png'), ('ans', 1)]), OrderedDict([('ctrlID', 'stim_ctrl/congruent_16.png'), ('ans', 1)]), OrderedDict([('ctrlID', 'stim_ctrl/congruent_17.png'), ('ans', 1)]), OrderedDict([('ctrlID', 'stim_ctrl/congruent_18.png'), ('ans', 1)]), OrderedDict([('ctrlID', 'stim_ctrl/congruent_19.png'), ('ans', 1)]), OrderedDict([('ctrlID', 'stim_ctrl/congruent_20.png'), ('ans', 1)]), OrderedDict([('ctrlID', 'stim_ctrl/congruent_21.png'), ('ans', 1)]), OrderedDict([('ctrlID', 'stim_ctrl/congruent_22.png'), ('ans', 1)]), OrderedDict([('ctrlID', 'stim_ctrl/congruent_23.png'), ('ans', 1)]), OrderedDict([('ctrlID', 'stim_ctrl/congruent_24.png'), ('ans', 1)]), OrderedDict([('ctrlID', 'stim_ctrl/congruent_25.png'), ('ans', 1)]), OrderedDict([('ctrlID', 'stim_ctrl/congruent_26.png'), ('ans', 1)]), OrderedDict([('ctrlID', 'stim_ctrl/congruent_27.png'), ('ans', 1)]), OrderedDict([('ctrlID', 'stim_ctrl/congruent_28.png'), ('ans', 1)]), OrderedDict([('ctrlID', 'stim_ctrl/congruent_29.png'), ('ans', 1)]), OrderedDict([('ctrlID', 'stim_ctrl/congruent_30.png'), ('ans', 1)]), OrderedDict([('ctrlID', 'stim_ctrl/congruent_31.png'), ('ans', 1)]), OrderedDict([('ctrlID', 'stim_ctrl/congruent_32.png'), ('ans', 1)]), OrderedDict([('ctrlID', 'stim_ctrl/congruent_33.png'), ('ans', 1)]), OrderedDict([('ctrlID', 'stim_ctrl/congruent_34.png'), ('ans', 1)]), OrderedDict([('ctrlID', 'stim_ctrl/congruent_35.png'), ('ans', 1)]), OrderedDict([('ctrlID', 'stim_ctrl/congruent_36.png'), ('ans', 1)]), OrderedDict([('ctrlID', 'stim_ctrl/congruent_37.png'), ('ans', 1)]), OrderedDict([('ctrlID', 'stim_ctrl/congruent_38.png'), ('ans', 1)]), OrderedDict([('ctrlID', 'stim_ctrl/congruent_39.png'), ('ans', 1)]), OrderedDict([('ctrlID', 'stim_ctrl/congruent_40.png'), ('ans', 1)]), OrderedDict([('ctrlID', 'stim_ctrl/congruent_41.png'), ('ans', 1)]), OrderedDict([('ctrlID', 'stim_ctrl/congruent_42.png'), ('ans', 1)]), OrderedDict([('ctrlID', 'stim_ctrl/congruent_43.png'), ('ans', 1)]), OrderedDict([('ctrlID', 'stim_ctrl/congruent_44.png'), ('ans', 1)]), OrderedDict([('ctrlID', 'stim_ctrl/congruent_45.png'), ('ans', 1)]), OrderedDict([('ctrlID', 'stim_ctrl/congruent_46.png'), ('ans', 1)]), OrderedDict([('ctrlID', 'stim_ctrl/congruent_47.png'), ('ans', 1)]), OrderedDict([('ctrlID', 'stim_ctrl/congruent_48.png'), ('ans', 1)]), OrderedDict([('ctrlID', 'stim_ctrl/congruent_49.png'), ('ans', 1)]), OrderedDict([('ctrlID', 'stim_ctrl/congruent_50.png'), ('ans', 1)]), OrderedDict([('ctrlID', 'stim_ctrl/congruent_51.png'), ('ans', 1)]), OrderedDict([('ctrlID', 'stim_ctrl/congruent_52.png'), ('ans', 1)]), OrderedDict([('ctrlID', 'stim_ctrl/congruent_53.png'), ('ans', 1)]), OrderedDict([('ctrlID', 'stim_ctrl/congruent_54.png'), ('ans', 1)]), OrderedDict([('ctrlID', 'stim_ctrl/congruent_55.png'), ('ans', 1)]), OrderedDict([('ctrlID', 'stim_ctrl/congruent_56.png'), ('ans', 1)]), OrderedDict([('ctrlID', 'stim_ctrl/congruent_57.png'), ('ans', 1)]), OrderedDict([('ctrlID', 'stim_ctrl/congruent_58.png'), ('ans', 1)]), OrderedDict([('ctrlID', 'stim_ctrl/congruent_59.png'), ('ans', 1)]), OrderedDict([('ctrlID', 'stim_ctrl/congruent_60.png'), ('ans', 1)])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="ctrl_coord.csv" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="num"/>
      <Param name="name" updates="None" val="ctrlLoop" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="ctrlTrial"/>
    <Routine name="ctrlFb"/>
    <LoopTerminator name="ctrlLoop"/>
    <Routine name="rest2"/>
    <LoopTerminator name="blockLoop"/>
    <Routine name="end"/>
  </Flow>
</PsychoPy2experiment>
