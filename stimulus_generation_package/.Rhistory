geom_point(data = CatA, shape = 22, size = 2, fill = "#C46E71", color = "black") +                 #plot category A
geom_point(data = CatB, shape = 24, size = 2, fill = "#05A39E", color = "black") +                 #plot category B
geom_segment(aes(x = loBound, xend = hiBound, y = 0, yend = 0)) +                                  #draw x-axis
geom_segment(aes(x = 0, xend = 0, y = loBound, yend = hiBound)) +                                  #draw y-axis
geom_segment(aes(x = loBound, xend = hiBound, y = loBound, yend = hiBound), color = 'red') +       #draw II-boundary in red
xlim(loBound, hiBound) +
ylim(loBound, hiBound)
#define filepath
dirpath = "C:/Users/Tim/Google Drive/category/stimulusGenerationPackage"
# dirpath = "G:/My Drive/category/stimulusGenerationPackage" #work
#print plot to file
ggsave(filename = "II_arbitrarySpace.png", dpi = 1000)
#write individual categories to .csv
write.csv(CatA, "II_A_arbitrary.csv", row.names = FALSE)
write.csv(CatB, "II_B_arbitrary.csv", row.names = FALSE)
#create combined category coordinates with keymap (A = 1, B = 0)
CatA <- CatA %>%
mutate(keymap = 1) %>%
mutate(stimNum = seq(1,Num)) %>%
mutate(stimID = paste0("stim_II/II_A_", stimNum, ".png"))
CatB <- CatB %>%
mutate(keymap = 0) %>%
mutate(stimNum = seq(1,Num)) %>%
mutate(stimID = paste0("stim_II/II_B_", stimNum, ".png"))
II_coord <- rbind(CatA, CatB)
write.csv(II_coord, "II_coord_arbitrary.csv", row.names = FALSE)
#define stimulus space parameters here
cpiLo <- 6
cpiHi <- 15
degOri <- 117
cpiOri <- ((cpiHi - cpiLo) / 2) + cpiLo #finds the middle point in range of cpi
degLo <- degOri - 90  #finds upper angle bound
degHi <- degOri + 90  #finds lower angle bound
#compute new stimulus ranges necessary for transformation
arbitraryRange <- hiBound - loBound
cpiStimRange <- cpiHi - cpiLo
degStimRange <- degHi - degLo
#Linear Transformation for both cpi and deg
CatAStim <- CatA %>%
mutate(cpi = (((cpi - loBound) * cpiStimRange) / arbitraryRange) + cpiLo) %>%
mutate(deg = (((deg - loBound) * degStimRange) / arbitraryRange) + degLo) %>%
as.data.frame()
CatBStim <- CatB %>%
mutate(cpi = (((cpi - loBound) * cpiStimRange) / arbitraryRange) + cpiLo) %>%
mutate(deg = (((deg - loBound) * degStimRange) / arbitraryRange) + degLo) %>%
as.data.frame()
#Plot newly mapped stimulus space for visualization
ggplot(mapping = aes(x = cpi, y = deg)) +
geom_point(data = CatAStim, shape = 22, size = 2, fill = "#C46E71", color = "black") +                 #plot category A
geom_point(data = CatBStim, shape = 24, size = 2, fill = "#05A39E", color = "black") +                 #plot category B
geom_segment(aes(x = cpiLo, xend = cpiHi, y = degOri, yend = degOri)) +                                  #draw x-axis
geom_segment(aes(x = cpiOri, xend = cpiOri, y = degLo, yend = degHi)) +                                  #draw y-axis
geom_segment(aes(x = cpiLo, xend = cpiHi, y = degLo, yend = degHi), color = 'red') +       #draw II-boundary in red
xlim(cpiLo, cpiHi) +
ylim(degLo, degHi)
#define filepath
dirpath = "C:/Users/Tim/Google Drive/category/stimulusGenerationPackage"
#print plot to file
ggsave(filename = "II_stimulusSpace.png", dpi = 1000)
#write individual categories to .csv
write.csv(CatAStim, "II_A_stimulus.csv", row.names = FALSE)
write.csv(CatBStim, "II_B_stimulus.csv", row.names = FALSE)
#create combined category coordinates with keymap (A = 1, B = 0)
II_coordStim <- rbind(CatAStim, CatBStim)
write.csv(II_coordStim, "II_coord_stimulus.csv", row.names = FALSE)
IIpath = "C:/Users/Tim/Google Drive/category/stimulusGenerationPackage/stim_II/"
#Generate stim for category A
time0 <- Sys.time()  #keep track of running time
for (counter in 1:Num)
{
#define the parameters of the gabor patch
cpi <- CatAStim[counter,1]      #cycles per image
theta <- CatAStim[counter,2]   #degrees
gp <- gaborPatch(sf = cpi, theta = theta, npoints = 800, sigma = .13, trim = .001, trim.col = .501) #generates the gabor patch, use npoint >= 500
png(filename = paste0(IIpath, "II_A_", counter, ".png"))  #opens graphic device
par(mar = c(0,0,0,0), bg = NA)                                                                              #gets rid of margins
image(gp, useRaster = TRUE, axes = FALSE, col = grey(seq(0,1, length = 256)))                      #draws gp matrix to grayscale image
dev.off()                                                                                          #closes graphic device+
}
time1 <- Sys.time()  #records runtime
print(time1 - time0)
#Generate stim for category B
time0 <- Sys.time()
for (counter in 1:Num)
{
#define the parameters of the gabor patch
cpi <- CatBStim[counter,1]      #cycles per image
theta <- CatBStim[counter,2]   #degrees
gp <- gaborPatch(sf = cpi, theta = theta, npoints = 800, sigma = .13, trim = .001, trim.col = .501) #generates the gabor patch, use npoint >= 500
png(filename = paste0(IIpath, "II_B_", counter, ".png"))  #opens graphic device
par(mar = c(0,0,0,0), bg = NA)                                                                              #gets rid of margins
image(gp, useRaster = TRUE, axes = FALSE, col = grey(seq(0,1, length = 256)))                      #draws gp matrix to grayscale image
dev.off()
}
time1 <- Sys.time()
print(time1 - time0)
#Define parameters of stimuli here
Num <- 150
v <- 215
d <- 140
ori <- c(0,0)
loBound <- -100
hiBound <- 100
#Generate category structures
hyp <- d/2                   #get hypotenuse from origin
leg <- sqrt((hyp^2)/2)       #get leg of triangle
muA <- ori + c(leg, leg)     #add/subtract leg to origin to get category centroids
muB1 <- ori + c(-leg, leg)   #quadrant 1 is A, quadrant 2,3,4 are B
muB2 <- ori + c(-leg, -leg)
muB3 <- ori + c(leg, -leg)
Sig <- matrix(c(v,0,0,v),2,2) #define covariance matrix for bivariate normal distributions
#Get category coordinates from bivariate normal distribution based on above parameters
set.seed(14)
CatA <- mvrnorm(Num,muA,Sig)
CatB1 <- mvrnorm(Num/3,muB1,Sig)
CatB2 <- mvrnorm(Num/3,muB2,Sig)
CatB3 <- mvrnorm(Num/3,muB3,Sig)
#Compute between group variances (symmetrical bivariate, variance is equidistant)
bgvA <- CatA %>%
data.frame() %>%
rename(x = X1, y = X2) %>%
mutate(mx = mean(x),
my = mean(y)) %>%
mutate(dx = abs(x - mx),
dy = abs(y - my))
bgvB1 <- CatB1 %>%
data.frame() %>%
rename(x = X1, y = X2) %>%
mutate(mx = mean(x)) %>%
mutate(dx = abs(x - mx))
bgvB3 <- CatB3 %>%
data.frame() %>%
rename(x = X1, y = X2) %>%
mutate(my = mean(y)) %>%
mutate(dy = abs(y - my))
bgvx <- mean(c(bgvA$dx, bgvB1$dx))  #compute bgv in x direction
bgvy <- mean(c(bgvA$dy, bgvB3$dy))  #bgv in y direction
bgv <- mean(bgvx, bgvy)  #overall between-group variance along direction of comparison
ed = sqrt(((d^2) / 2))  #calculate euclidean distance between categories (not distance from origin)
std_dis <- ed/bgv #standard distance
print(paste0("Standard Distance: ", std_dis, " = ", ed, " / ", bgv))  #print to console
#Join B subcategories into one dataframe
CatB1 <- as.data.frame(CatB1)
CatB2 <- as.data.frame(CatB2)
CatB3 <- as.data.frame(CatB3)
CatB <- rbind(CatB1, CatB2, CatB3)
#Convert coordinates to dataframe and rename to cycles per image (cpi) and degrees (deg).
CatA <- CatA %>%
as.data.frame() %>%
rename(cpi = V1, deg = V2)
CatB <- CatB %>%
as.data.frame() %>%
rename(cpi = V1, deg = V2)
#Generate a plot of the aribrary space
ggplot(mapping = aes(x = cpi, y = deg)) +
coord_fixed() +
geom_point(data = CatA, shape = 22, size = 2, fill = "#C46E71", color = "black") +                 #plot category A
geom_point(data = CatB, shape = 24, size = 2, fill = "#05A39E", color = "black") +                 #plot category B
geom_segment(aes(x = loBound, xend = hiBound, y = 0, yend = 0)) +                                  #draw x-axis
geom_segment(aes(x = 0, xend = 0, y = loBound, yend = hiBound)) +                                  #draw y-axis
geom_segment(aes(x = 0, xend = 0, y = 0, yend = hiBound), color = 'red') +       #draw CR-boundary in red
geom_segment(aes(x = 0, xend = hiBound, y = 0, yend = 0), color = 'red') +
xlim(loBound, hiBound) +
ylim(loBound, hiBound)
#define filepath
dirpath = "C:/Users/Tim/Google Drive/category/stimulusGenerationPackage" #home
# dirpath = "G:/My Drive/category/stimulusGenerationPackage" #work
#print plot to file
ggsave(filename = "CR_arbitrarySpace.png", dpi = 1000)
#write individual categories to .csv
write.csv(CatA, "CR_A_arbitrary.csv", row.names = FALSE)
write.csv(CatB, "CR_B_arbitrary.csv", row.names = FALSE)
#create combined category coordinates with keymap (A = 1, B = 0)
CatA <- CatA %>%
mutate(keymap = 1) %>%
mutate(stimNum = seq(1,Num)) %>%
mutate(stimID = paste0("stim_CR/CR_A_", stimNum, ".png"))
CatB <- CatB %>%
mutate(keymap = 0) %>%
mutate(stimNum = seq(1,Num)) %>%
mutate(stimID = paste0("stim_CR/CR_B_", stimNum, ".png"))
CR_coord <- rbind(CatA, CatB)
write.csv(CR_coord, "CR_coord_arbitrary.csv", row.names = FALSE)
#define folder for demos
demopath = "C:/Users/Tim/Google Drive/category/stimulusGenerationPackage/demo/"
for (cpi in 1:20){  #loop cpi from 1-20
gp <- gaborPatch(sf = cpi, theta = 45, npoints = 500)  #create gp for each cpi value
png(filename = paste0(demopath, "cpi_", cpi, ".png"))  #opens graphic device to plot gp
par(mar = c(0,0,0,0), bg = NA)                                                                              #gets rid of margins
image(gp, useRaster = TRUE, axes = FALSE, col = grey(seq(0,1, length = 256)))                      #draws gp matrix to grayscale image
dev.off()
}
#define stimulus space parameters here
cpiLo <- 6
cpiHi <- 15
degOri <- 74
cpiOri <- ((cpiHi - cpiLo) / 2) + cpiLo #finds the middle point in range of cpi
degLo <- degOri - 90  #finds upper angle bound
degHi <- degOri + 90  #finds lower angle bound
#compute new stimulus ranges necessary for transformation
arbitraryRange <- hiBound - loBound
cpiStimRange <- cpiHi - cpiLo
degStimRange <- degHi - degLo
#Linear Transformation for both cpi and deg
CatAStim <- CatA %>%
mutate(cpi = (((cpi - loBound) * cpiStimRange) / arbitraryRange) + cpiLo) %>%
mutate(deg = (((deg - loBound) * degStimRange) / arbitraryRange) + degLo) %>%
as.data.frame()
CatBStim <- CatB %>%
mutate(cpi = (((cpi - loBound) * cpiStimRange) / arbitraryRange) + cpiLo) %>%
mutate(deg = (((deg - loBound) * degStimRange) / arbitraryRange) + degLo) %>%
as.data.frame()
#Plot newly mapped stimulus space for visualization
ggplot(mapping = aes(x = cpi, y = deg)) +
geom_point(data = CatAStim, shape = 22, size = 2, fill = "#C46E71", color = "black") +                 #plot category A
geom_point(data = CatBStim, shape = 24, size = 2, fill = "#05A39E", color = "black") +                 #plot category B
geom_segment(aes(x = cpiLo, xend = cpiHi, y = degOri, yend = degOri)) +                                  #draw x-axis
geom_segment(aes(x = cpiOri, xend = cpiOri, y = degLo, yend = degHi)) +                                  #draw y-axis
geom_segment(aes(x = cpiOri, xend = cpiOri, y = degOri, yend = degHi), color = 'red') +       #draw CR-boundary in red
geom_segment(aes(x = cpiOri, xend = cpiHi, y = degOri, yend = degOri), color = 'red') +
xlim(cpiLo, cpiHi) +
ylim(degLo, degHi)
#define filepath
dirpath = "C:/Users/Tim/Google Drive/category/stimulusGenerationPackage"
#print plot to file
ggsave(filename = "CR_stimulusSpace.png", dpi = 1000)
#write individual categories to .csv
write.csv(CatAStim, "CR_A_stimulus.csv", row.names = FALSE)
write.csv(CatBStim, "CR_B_stimulus.csv", row.names = FALSE)
#create combined category coordinates with keymap (A = 1, B = 0)
CR_coordStim <- rbind(CatAStim, CatBStim)
write.csv(CR_coordStim, "CR_coord_stimulus.csv", row.names = FALSE)
CRpath = "C:/Users/Tim/Google Drive/category/stimulusGenerationPackage/stim_CR/"
#Generate stim for category A
time0 <- Sys.time()  #keep track of running time
for (counter in 1:Num)
{
#define the parameters of the gabor patch
cpi <- CatAStim[counter,1]      #cycles per image
theta <- CatAStim[counter,2]   #degrees
gp <- gaborPatch(sf = cpi, theta = theta, npoints = 800, sigma = .13, trim = .001, trim.col = .501) #generates the gabor patch, use npoint >= 500
png(filename = paste0(CRpath, "CR_A_", counter, ".png"))  #opens graphic device
par(mar = c(0,0,0,0), bg = NA)                                                                              #gets rid of margins
image(gp, useRaster = TRUE, axes = FALSE, col = grey(seq(0,1, length = 256)))                      #draws gp matrix to grayscale image
dev.off()                                                                                          #closes graphic device+
}
time1 <- Sys.time()  #records runtime
print(time1 - time0)
#Generate stim for category B
time0 <- Sys.time()
for (counter in 1:Num)
{
#define the parameters of the gabor patch
cpi <- CatBStim[counter,1]      #cycles per image
theta <- CatBStim[counter,2]   #degrees
gp <- gaborPatch(sf = cpi, theta = theta, npoints = 800, sigma = .13, trim = .001, trim.col = .501) #generates the gabor patch, use npoint >= 500
png(filename = paste0(CRpath, "CR_B_", counter, ".png"))  #opens graphic device
par(mar = c(0,0,0,0), bg = NA)                                                                              #gets rid of margins
image(gp, useRaster = TRUE, axes = FALSE, col = grey(seq(0,1, length = 256)))                      #draws gp matrix to grayscale image
dev.off()
}
time1 <- Sys.time()
print(time1 - time0)
knitr::opts_chunk$set(echo = TRUE)
library(grt)
library(tidyverse)
library(GGally)
library(rstatix)
library(ggpubr)
setwd("C:/Users/Tim/Google Drive/category/analysis") #home computer
# setwd("G:/My Drive/category/analysis") #work computer
##Extraction function for II data
#extraction takes argument nppt (participant number)
ii_extract <- function(nppt){
#reads in ppt datafile
ii_data <- read.csv(paste0("data/ppt (", nppt, ").csv"))
#extracts only the ii-relevant data
ii_data <- ii_data %>%
select(participant, keymap, cpi, deg, II_catResp.keys) %>%
slice(1:300) %>%
filter(!grepl('none', II_catResp.keys, ignore.case = TRUE)) %>%
mutate(keymap = factor(keymap),
II_catResp.keys = factor(II_catResp.keys))
return(ii_data)
}
##Extraction function for CR data
#extraction takes argument nppt (participant number)
cr_extract <- function(nppt){
#reads in ppt datafile
cr_data <- read.csv(paste0("data/ppt (", nppt, ").csv"))
#extracts only the ii-relevant data
cr_data <- cr_data %>%
select(participant, keymap, cpi, deg, CR_catResp.keys) %>%
slice(301:600) %>%
filter(!grepl('none', CR_catResp.keys, ignore.case = TRUE)) %>%
mutate(keymap = factor(keymap),
CR_catResp.keys = factor(CR_catResp.keys))
return(cr_data)
}
ii_curve <- function(ii_df){
id <- rep(ii_df[1,"participant"], 5)
ii_perf <- ii_df %>%
mutate(corr = ifelse(keymap == II_catResp.keys, 1, 0)) %>%                         #codes correct answers
mutate(block = c(rep(1, 60), rep(2, 60), rep(3, 60), rep(4, 60), rep(5,60))) %>%   #creates block numbers of 5 x 60 = 300
dplyr::count(corr, block) %>%   #creates a "count" df
filter(corr == 1) %>%        #only selects correct answers
mutate(perf = n/60) %>%    #computes accuracy %
mutate(cond = factor(rep("II", 5))) %>%  #adds condition label
# mutate(block = factor(block)) %>%
select(cond, block, perf)
ii_perf <- cbind(id, ii_perf)
return(ii_perf)
}
cr_curve <- function(cr_df){
id <- rep(cr_df[1,"participant"], 5)
cr_perf <- cr_df %>%
mutate(corr = ifelse(keymap == CR_catResp.keys, 1, 0)) %>%                         #codes correct answers
mutate(block = c(rep(1, 60), rep(2, 60), rep(3, 60), rep(4, 60), rep(5,60))) %>%   #creates block numbers of 5 x 60 = 300
dplyr::count(corr, block) %>%   #creates a "count" df
filter(corr == 1) %>%        #only selects correct answers
mutate(perf = n/60) %>%    #computes accuracy %
mutate(cond = factor(rep("CR", 5))) %>%  #adds condition label
# mutate(block = factor(block)) %>%
select(cond, block, perf)
cr_perf <- cbind(id, cr_perf)
return(cr_perf)
}
n <- 75
pptLong <- data.frame()
pptDumb <- 0
#Loops through n of ppt, extracts raw data and converts to long format
for (i in 1:n){
print(i)  #print loop number for diagnosing bad datafiles
#extracts ii/cr learning rates
ii_perf <- ii_curve(ii_extract(i))
cr_perf <- cr_curve(cr_extract(i))
#concatenates learner data
cb_df <- rbind(ii_perf, cr_perf)
#screens out ppt who did not achieve above 60% accuracy on the fifth block
if((cb_df[5,"perf"] <= 0.55) | (cb_df[10, "perf"] <= 0.55)){
#counts number of ppt who didn't learn at all
pptDumb <- pptDumb + 1
} else {
#appends to dataframe containing all participants
pptLong <- rbind(pptLong, cb_df)
}
# View(cb_df)  #To visualize per individual dataframe
}
print(paste0("Number of removed ppt: ", pptDumb))
print(paste0("Number of ppt left: ", (n-pptDumb)))
pptLong
#Change variable types to run stats
pptLong <- pptLong %>%
mutate(id = factor(id)) %>%
mutate(block = factor(block))
# a <- pptLong %>%
#   count(id)
#
# a
#Run ANOVA model
repaov <- anova_test(data = pptLong,
dv = perf,
wid = id,
within = c(cond, block))
#Extract ANOVA parameters
get_anova_table(repaov)
ph_b <- pptLong %>%
group_by(cond) %>%
anova_test(dv = perf,
wid = id,
within = block) %>%
get_anova_table() %>%
adjust_pvalue(method = "holm")
ph_b
ph_c <- pptLong %>%
group_by(block) %>%
anova_test(dv = perf,
wid = id,
within = cond) %>%
get_anova_table() %>%
adjust_pvalue(method = "holm")
ph_c
#define function for calcuating standard error
se <- function(x, na.rm=FALSE) {
if (na.rm) x <- na.omit(x)
sqrt(var(x)/length(x))
}
vizdf <- pptLong %>%
mutate(block = as.numeric(block)) %>%  #chg type for painfree plots
group_by(cond, block) %>%  #yo group_by is a lit function you can group by more than just one variable
summarise(perf_m = mean(perf), perf_se = se(perf)) %>%
mutate(sdhi = perf_m + perf_se) %>%
mutate(sdlo = perf_m - perf_se)
vizdf
pptLong
ggplot(vizdf, aes(x = block, y = perf_m, color = cond)) +
geom_line(size = 0.1) +
geom_errorbar(aes(ymin = sdlo, ymax = sdhi), size = 1, width = 0.1, position = position_dodge(width = 0.1)) +
geom_point(aes(shape = cond), size = 3, position = position_dodge(width = 0.1)) +
ylim(0.6, 0.85) +
xlab("BLOCK (60 trials)") +
ylab("Accuracy") +
theme_pubr() +
theme(axis.line = element_line(colour = 'black', size = 1.2),
axis.title.x = element_text(color="black", size= 12, face="bold", margin = margin(t = 10)),   #increase axis thickness
axis.title.y = element_text(color="black", size= 12, face="bold", margin = margin(r = 10)))
#Function fits 4 categorization strategies and pulls AIC values for each
#pptdata: a dataframe input with columns - category, respones, cpi, deg
#plots: whether you want to see the decision bounds plotted, a boolean
modelfit <- function(pptdat, plots){
#fits CR,II models
cr_strat <- gcjc(response ~ cpi + deg, data = pptdat, category = pptdat$keymap, config = 1, zlimit=7)  #2D Conjunctive rule
ii_strat <- glc(response ~ cpi + deg, data = pptdat, category = pptdat$keymap, zlimit=7)     #2D information integration
fr_strat <- glc(response ~ cpi, data = pptdat, category = pptdat$keymap, zlimit=7)           #1D frequency rule (fr)
or_strat <- glc(response ~ deg, data = pptdat, category = pptdat$keymap, zlimit=7)           #1D orientation rule (or)
#computes AIC for all models
aic_report <- AIC(cr_strat, ii_strat, fr_strat, or_strat) #returns AIC
aic_report
#gets AIC from aic_report, order of AIC values are hardcoded (CR, II, FR, OR)
aicLabel <- c(aic_report$AIC)
#prints plots
if (plots == TRUE){
plot.gcjc(cr_strat)
plot.glc(ii_strat)
}
return(aicLabel)
}
#initialize empty dataframe storing AIC for each condition's models
II_aic <- data.frame()
CR_aic <- data.frame()
pptDumb <- 0
#loop through all ppt datafiles
for (i in 1:n){
#extract response data for each condition
ii_resp <- ii_extract(i)
cr_resp <- cr_extract(i)
#extracts ii/cr learning rates
ii_perf <- ii_curve(ii_resp)
cr_perf <- cr_curve(cr_resp)
#concatenates learner data
cb_df <- rbind(ii_perf, cr_perf)
#screens out ppt who did not achieve above 55% accuracy by the fifth block
if((cb_df[5,"perf"] <= 0.55) | (cb_df[10, "perf"] <= 0.55)){
#counts number of ppt who didn't learn at all
pptDumb <- pptDumb + 1
} else {  #if ppt achieved >55% performance
#modify response file for modeling compatibility
ii_resp <- ii_resp %>%
na.omit() %>%
rename(response = II_catResp.keys) %>%
mutate(keymap = ifelse(keymap == 0, 2, 1)) %>% #changes 0->2 otherwise gcjc breaks
mutate(response = ifelse(response == 0, 2, 1)) #changes 0->2 otherwise gcjc breaks
cr_resp <- cr_resp %>%
na.omit() %>%
rename(response = CR_catResp.keys) %>%
mutate(keymap = ifelse(keymap == 0, 2, 1)) %>% #changes 0->2 otherwise gcjc breaks
mutate(response = ifelse(response == 0, 2, 1)) #changes response 0->2 otherwise gcjc breaks
#fit models and append AIC values for each ppt
II_aic <- rbind(II_aic, modelfit(ii_resp, FALSE))
CR_aic <- rbind(CR_aic, modelfit(cr_resp, FALSE))
}
}
#name dataframe columns according to strategy
colnames(II_aic) <- c("CR", "II", "FR", "OR")
colnames(CR_aic) <- c("CR", "II", "FR", "OR")
print(paste0("Number of removed ppt: ", pptDumb))
print(paste0("Number of ppt left: ", (n-pptDumb)))
II_aic
CR_aic
#define function for finding minimum value in row
min.col <- function(m, ...) max.col(-m, ...)
#finds best fitting model strategy for II condition
II_modfit <- II_aic %>%
mutate(best = colnames(II_aic)[min.col(II_aic)]) %>% #grab col (cond) name of bestfit model
mutate(best = factor(best, levels = c("CR", "II", "FR", "OR"))) %>% #keeps 0 counts too
count(best, .drop = FALSE)
#compute proportion for each strategy in the II condition notation: condition_strat_prop
II_cr_prop <- filter(II_modfit, best == "CR")[,'n'] / (sum(II_modfit$n))  #compute proportion of II-strat used in II-condition
II_ii_prop <- filter(II_modfit, best == "II")[,'n'] / (sum(II_modfit$n))
II_fr_prop <- filter(II_modfit, best == "FR")[,'n'] / (sum(II_modfit$n))
II_or_prop <- filter(II_modfit, best == "OR")[,'n'] / (sum(II_modfit$n))
II_rb_prop <- II_fr_prop + II_or_prop
#finds best fitting model strategy for CR condition
CR_modfit <- CR_aic %>%
mutate(best = colnames(CR_aic)[min.col(CR_aic)]) %>%
mutate(best = factor(best, levels = c("CR", "II", "FR", "OR"))) %>% #keeps 0 counts too
count(best, .drop = FALSE)
#compute proportion for each strategy in the II condition notation: condition_strat_prop
CR_cr_prop <- filter(CR_modfit, best == "CR")[,'n'] / (sum(CR_modfit$n))
CR_ii_prop <- filter(CR_modfit, best == "II")[,'n'] / (sum(CR_modfit$n))
CR_fr_prop <- filter(CR_modfit, best == "FR")[,'n'] / (sum(CR_modfit$n))
CR_or_prop <- filter(CR_modfit, best == "OR")[,'n'] / (sum(CR_modfit$n))
CR_rb_prop <- CR_fr_prop + CR_or_prop #single dimenision rb proportion (or + fr)
#create dataframe storing all proportions data
II_cond <- rep("II", 3)
II_strat <- c("cr", "ii", "rb")
II_prop <- c(II_cr_prop, II_ii_prop, II_rb_prop)
II_df <- data.frame(cond = II_cond, strat = II_strat, prop = II_prop)
CR_cond <- rep("CR", 3)
CR_strat <- c("cr", "ii", "rb")
CR_prop <- c(CR_cr_prop, CR_ii_prop, CR_rb_prop)
CR_df <- data.frame(cond = CR_cond, strat = CR_strat, prop = CR_prop)
prop_df <- rbind(II_df, CR_df) #combine into 1 dataframe
prop_df
ggplot(prop_df, aes(fill = strat, x = cond, y = prop)) +
geom_bar(aes(fill = strat), color = "black", position = "dodge", stat = "identity", width = .5) +
ylim(0,1) +
theme_pubr()
ggplot(prop_df, aes(fill = strat, x = cond, y = prop)) +
geom_bar(aes(fill = strat), color = "black", position = "dodge", stat = "identity", width = .5) +
ylim(0,1) +
theme_pubr()
